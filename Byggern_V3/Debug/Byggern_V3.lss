
Byggern_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00002aea  00002b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800250  00800250  00002cce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004544  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001772  00000000  00000000  000075c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001db5  00000000  00000000  00008d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000948  00000000  00000000  0000aaec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b6a  00000000  00000000  0000b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f82  00000000  00000000  0000bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000ef20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_1>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	ea ee       	ldi	r30, 0xEA	; 234
     702:	fa e2       	ldi	r31, 0x2A	; 42
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a0 35       	cpi	r26, 0x50	; 80
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a0 e5       	ldi	r26, 0x50	; 80
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a1 36       	cpi	r26, 0x61	; 97
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 ef 06 	call	0xdde	; 0xdde <main>
     724:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
#define ADC_BUSY 3 


void adc_init(void) {
	// PWM 16 bit
	DDRD |= (1 << PD5);
     72c:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A = (0b11 << COM1A0)|(0b11 << COM1B0)|(0b00 << FOC1B)|(0b10 << WGM10);
     72e:	82 ef       	ldi	r24, 0xF2	; 242
     730:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (0 << ICNC1)|(0b0 << (ICES1))|(0b11 << WGM12)|(0b001 << CS10);
     732:	89 e1       	ldi	r24, 0x19	; 25
     734:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 0x0A00; // Set frequency to 1920 Hz
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	9a e0       	ldi	r25, 0x0A	; 10
     73a:	95 bd       	out	0x25, r25	; 37
     73c:	84 bd       	out	0x24, r24	; 36
	OCR1A = 0x0500; // Set duty cycle to 50 %
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	95 e0       	ldi	r25, 0x05	; 5
     742:	9b bd       	out	0x2b, r25	; 43
     744:	8a bd       	out	0x2a, r24	; 42

	// ADC busy pin
	DDRD |= (0 << ADC_BUSY); //Set pin as input
     746:	81 b3       	in	r24, 0x11	; 17
     748:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << ADC_BUSY); //Set pull up resistor
     74a:	93 9a       	sbi	0x12, 3	; 18
     74c:	08 95       	ret

0000074e <adc_read>:
}

uint8_t adc_read(ADC_CHANNEL channel) {
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data = 0x00;
     758:	19 82       	std	Y+1, r1	; 0x01
	volatile char *ext_adc = (char*) BASE_ADDRESS;
	ext_adc[0] = 0x80 | channel;
     75a:	80 68       	ori	r24, 0x80	; 128
     75c:	e0 e0       	ldi	r30, 0x00	; 0
     75e:	f4 e1       	ldi	r31, 0x14	; 20
     760:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	9f e2       	ldi	r25, 0x2F	; 47
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <adc_read+0x18>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <adc_read+0x1e>
     76c:	00 00       	nop
	//while(!(PIND & (1 << ADC_BUSY))); //Waiting for conversion
	_delay_ms(10);

	data = ext_adc[0];
     76e:	80 81       	ld	r24, Z
     770:	89 83       	std	Y+1, r24	; 0x01
	return data;
     772:	89 81       	ldd	r24, Y+1	; 0x01
}
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <get_score_flag>:

static int score_flag = 0;

int get_score_flag(void) {
	return score_flag;
}
     77c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <score_flag>
     780:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <score_flag+0x1>
     784:	08 95       	ret

00000786 <set_score_flag>:

void set_score_flag(int score) {
	score_flag = score;
     786:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <score_flag+0x1>
     78a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <score_flag>
     78e:	08 95       	ret

00000790 <can_init>:
		mcp2515_bit_modify(MCP_CANINTF, 0x03, 0x00);
	}
}

void can_init(void) {
	mcp2515_init();
     790:	0e 94 7b 07 	call	0xef6	; 0xef6 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_CNF1, 0xFF, 0x43);
     794:	43 e4       	ldi	r20, 0x43	; 67
     796:	6f ef       	ldi	r22, 0xFF	; 255
     798:	8a e2       	ldi	r24, 0x2A	; 42
     79a:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2, 0xFF, 0xB5);
     79e:	45 eb       	ldi	r20, 0xB5	; 181
     7a0:	6f ef       	ldi	r22, 0xFF	; 255
     7a2:	89 e2       	ldi	r24, 0x29	; 41
     7a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3, 0xFF, 1);
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	6f ef       	ldi	r22, 0xFF	; 255
     7ac:	88 e2       	ldi	r24, 0x28	; 40
     7ae:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	60 ee       	ldi	r22, 0xE0	; 224
     7b6:	8f e0       	ldi	r24, 0x0F	; 15
     7b8:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	
	uint8_t can_status;
	can_status = mcp2515_read(MCP_CANSTAT);
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
	if((can_status & MODE_MASK) != MODE_NORMAL) {
     7c2:	80 7e       	andi	r24, 0xE0	; 224
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <can_init+0x46>
		printf("MCP2515 is NOT in normal mode.\n\r");
     7c6:	86 e0       	ldi	r24, 0x06	; 6
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf>
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
	}
	
	// Disable interrupts
	cli();
     7d6:	f8 94       	cli
	// External interrupt request 0 enable
	GICR |= (1 << INT0);
     7d8:	8b b7       	in	r24, 0x3b	; 59
     7da:	80 64       	ori	r24, 0x40	; 64
     7dc:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     7de:	78 94       	sei
	// Falling edge generates interrupt
	MCUCR |= (1 << ISC01);
     7e0:	85 b7       	in	r24, 0x35	; 53
     7e2:	82 60       	ori	r24, 0x02	; 2
     7e4:	85 bf       	out	0x35, r24	; 53
	
	// Receive buffer 0 control register
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     7e6:	4f ef       	ldi	r20, 0xFF	; 255
     7e8:	60 e6       	ldi	r22, 0x60	; 96
     7ea:	80 e6       	ldi	r24, 0x60	; 96
     7ec:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	
	// Transmit buffer 0 control register
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00000011, 0xFF);
     7f0:	4f ef       	ldi	r20, 0xFF	; 255
     7f2:	63 e0       	ldi	r22, 0x03	; 3
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	// Transmit buffer 1 control register
	mcp2515_bit_modify(0x40, 0b00000011, 0xFF);
     7fa:	4f ef       	ldi	r20, 0xFF	; 255
     7fc:	63 e0       	ldi	r22, 0x03	; 3
     7fe:	80 e4       	ldi	r24, 0x40	; 64
     800:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	// Transmit buffer 2 control register
	mcp2515_bit_modify(0x50, 0b00000011, 0xFF);
     804:	4f ef       	ldi	r20, 0xFF	; 255
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	80 e5       	ldi	r24, 0x50	; 80
     80a:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
     80e:	08 95       	ret

00000810 <can_receive>:
	}
	
	mcp2515_request_to_send(buffer);
}

void can_receive(CAN_MSG* message) {
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	6c 01       	movw	r12, r24
	message->length = (0x0F & mcp2515_read(MCP_RXB0DLC));
     820:	85 e6       	ldi	r24, 0x65	; 101
     822:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	f6 01       	movw	r30, r12
     82a:	82 83       	std	Z+2, r24	; 0x02
	message->id = ((((uint16_t) mcp2515_read(MCP_RXB0SIDH)) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5));
     82c:	81 e6       	ldi	r24, 0x61	; 97
     82e:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     832:	c8 2f       	mov	r28, r24
     834:	82 e6       	ldi	r24, 0x62	; 98
     836:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     83a:	2c 2f       	mov	r18, r28
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	82 95       	swap	r24
     84c:	86 95       	lsr	r24
     84e:	87 70       	andi	r24, 0x07	; 7
     850:	28 2b       	or	r18, r24
     852:	f6 01       	movw	r30, r12
     854:	31 83       	std	Z+1, r19	; 0x01
     856:	20 83       	st	Z, r18
	
	for(unsigned int i = 0; i < message->length; i++) {
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	88 23       	and	r24, r24
     85c:	a9 f0       	breq	.+42     	; 0x888 <can_receive+0x78>
     85e:	76 01       	movw	r14, r12
     860:	f3 e0       	ldi	r31, 0x03	; 3
     862:	ef 0e       	add	r14, r31
     864:	f1 1c       	adc	r15, r1
     866:	16 e6       	ldi	r17, 0x66	; 102
     868:	c0 e0       	ldi	r28, 0x00	; 0
     86a:	d0 e0       	ldi	r29, 0x00	; 0
		message->data[i] = mcp2515_read(MCP_RXB0DB0+i);
     86c:	81 2f       	mov	r24, r17
     86e:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     872:	f7 01       	movw	r30, r14
     874:	81 93       	st	Z+, r24
     876:	7f 01       	movw	r14, r30

void can_receive(CAN_MSG* message) {
	message->length = (0x0F & mcp2515_read(MCP_RXB0DLC));
	message->id = ((((uint16_t) mcp2515_read(MCP_RXB0SIDH)) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5));
	
	for(unsigned int i = 0; i < message->length; i++) {
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	1f 5f       	subi	r17, 0xFF	; 255
     87c:	f6 01       	movw	r30, r12
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	c8 17       	cp	r28, r24
     884:	d9 07       	cpc	r29, r25
     886:	90 f3       	brcs	.-28     	; 0x86c <can_receive+0x5c>
		message->data[i] = mcp2515_read(MCP_RXB0DB0+i);
	}
	mcp2515_bit_modify(MCP_CANINTF, (1 << 0) ,0);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	8c e2       	ldi	r24, 0x2C	; 44
     88e:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	cf 90       	pop	r12
     8a0:	08 95       	ret

000008a2 <__vector_1>:

void set_score_flag(int score) {
	score_flag = score;
}

ISR(INT0_vect) {
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	ef 93       	push	r30
     8ce:	ff 93       	push	r31
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	2b 97       	sbiw	r28, 0x0b	; 11
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t flags = mcp2515_read(MCP_CANINTF) & 0x03;
     8de:	8c e2       	ldi	r24, 0x2C	; 44
     8e0:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     8e4:	83 70       	andi	r24, 0x03	; 3
     8e6:	d8 2e       	mov	r13, r24
     8e8:	02 e0       	ldi	r16, 0x02	; 2
     8ea:	10 e0       	ldi	r17, 0x00	; 0
	CAN_MSG msg;
	
	for(int i = 0; i < 3; i++) {
		if(mcp2515_read(MCP_CANINTF) & (1 << (2 + i))) {
			//printf("Transmit interrupt: %x\n\r", mcp2515_read(MCP_CANINTF) & (1 << (2 + i)));
			mcp2515_bit_modify(MCP_CANINTF, (1 << (2 + i)), 0x00);
     8ec:	ee 24       	eor	r14, r14
     8ee:	e3 94       	inc	r14
     8f0:	f1 2c       	mov	r15, r1
ISR(INT0_vect) {
	uint8_t flags = mcp2515_read(MCP_CANINTF) & 0x03;
	CAN_MSG msg;
	
	for(int i = 0; i < 3; i++) {
		if(mcp2515_read(MCP_CANINTF) & (1 << (2 + i))) {
     8f2:	8c e2       	ldi	r24, 0x2C	; 44
     8f4:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	00 2e       	mov	r0, r16
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__vector_1+0x60>
     8fe:	95 95       	asr	r25
     900:	87 95       	ror	r24
     902:	0a 94       	dec	r0
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__vector_1+0x5c>
     906:	80 ff       	sbrs	r24, 0
     908:	0b c0       	rjmp	.+22     	; 0x920 <__vector_1+0x7e>
			//printf("Transmit interrupt: %x\n\r", mcp2515_read(MCP_CANINTF) & (1 << (2 + i)));
			mcp2515_bit_modify(MCP_CANINTF, (1 << (2 + i)), 0x00);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	b7 01       	movw	r22, r14
     90e:	00 2e       	mov	r0, r16
     910:	02 c0       	rjmp	.+4      	; 0x916 <__vector_1+0x74>
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <__vector_1+0x70>
     91a:	8c e2       	ldi	r24, 0x2C	; 44
     91c:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
     920:	0f 5f       	subi	r16, 0xFF	; 255
     922:	1f 4f       	sbci	r17, 0xFF	; 255

ISR(INT0_vect) {
	uint8_t flags = mcp2515_read(MCP_CANINTF) & 0x03;
	CAN_MSG msg;
	
	for(int i = 0; i < 3; i++) {
     924:	05 30       	cpi	r16, 0x05	; 5
     926:	11 05       	cpc	r17, r1
     928:	21 f7       	brne	.-56     	; 0x8f2 <__vector_1+0x50>
			//printf("Transmit interrupt: %x\n\r", mcp2515_read(MCP_CANINTF) & (1 << (2 + i)));
			mcp2515_bit_modify(MCP_CANINTF, (1 << (2 + i)), 0x00);
		}
	}
	
	if(flags) {
     92a:	dd 20       	and	r13, r13
     92c:	e9 f1       	breq	.+122    	; 0x9a8 <__vector_1+0x106>
		can_receive(&msg);
     92e:	ce 01       	movw	r24, r28
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	0e 94 08 04 	call	0x810	; 0x810 <can_receive>
		if(msg.id == MSG_ID_POINT_SCORED) {
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	04 97       	sbiw	r24, 0x04	; 4
     93c:	31 f4       	brne	.+12     	; 0x94a <__vector_1+0xa8>
int get_score_flag(void) {
	return score_flag;
}

void set_score_flag(int score) {
	score_flag = score;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <score_flag+0x1>
     946:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <score_flag>
	if(flags) {
		can_receive(&msg);
		if(msg.id == MSG_ID_POINT_SCORED) {
			set_score_flag(1);
		}
		for(unsigned int i = 0; i < msg.length; i++) {
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	88 23       	and	r24, r24
     94e:	39 f1       	breq	.+78     	; 0x99e <__vector_1+0xfc>
     950:	6e 01       	movw	r12, r28
     952:	24 e0       	ldi	r18, 0x04	; 4
     954:	c2 0e       	add	r12, r18
     956:	d1 1c       	adc	r13, r1
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
			printf("Msg %d = %x, ID: %x\n\r", i, msg.data[i], msg.id);
     95c:	0f 2e       	mov	r0, r31
     95e:	f7 e2       	ldi	r31, 0x27	; 39
     960:	ef 2e       	mov	r14, r31
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	ff 2e       	mov	r15, r31
     966:	f0 2d       	mov	r31, r0
     968:	f6 01       	movw	r30, r12
     96a:	81 91       	ld	r24, Z+
     96c:	6f 01       	movw	r12, r30
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	9f 93       	push	r25
     972:	99 81       	ldd	r25, Y+1	; 0x01
     974:	9f 93       	push	r25
     976:	1f 92       	push	r1
     978:	8f 93       	push	r24
     97a:	1f 93       	push	r17
     97c:	0f 93       	push	r16
     97e:	ff 92       	push	r15
     980:	ef 92       	push	r14
     982:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf>
	if(flags) {
		can_receive(&msg);
		if(msg.id == MSG_ID_POINT_SCORED) {
			set_score_flag(1);
		}
		for(unsigned int i = 0; i < msg.length; i++) {
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	08 17       	cp	r16, r24
     99a:	19 07       	cpc	r17, r25
     99c:	28 f3       	brcs	.-54     	; 0x968 <__vector_1+0xc6>
			printf("Msg %d = %x, ID: %x\n\r", i, msg.data[i], msg.id);
		}
		
		mcp2515_bit_modify(MCP_CANINTF, 0x03, 0x00);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	8c e2       	ldi	r24, 0x2C	; 44
     9a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp2515_bit_modify>
	}
}
     9a8:	2b 96       	adiw	r28, 0x0b	; 11
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <can_transmit_done>:
		message->data[i] = mcp2515_read(MCP_RXB0DB0+i);
	}
	mcp2515_bit_modify(MCP_CANINTF, (1 << 0) ,0);
}

uint8_t can_transmit_done(uint8_t transmit_buffer) {
     9e6:	cf 93       	push	r28
     9e8:	c8 2f       	mov	r28, r24
	uint8_t i_flags = (mcp2515_read(MCP_CANINTF) & (1 << (2 + transmit_buffer)));
     9ea:	8c e2       	ldi	r24, 0x2C	; 44
     9ec:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
	return !i_flags;
     9f0:	ce 5f       	subi	r28, 0xFE	; 254
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <can_transmit_done+0x16>
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	ca 95       	dec	r28
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <can_transmit_done+0x12>
     a00:	28 23       	and	r18, r24
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <can_transmit_done+0x22>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <can_send>:
	mcp2515_bit_modify(0x40, 0b00000011, 0xFF);
	// Transmit buffer 2 control register
	mcp2515_bit_modify(0x50, 0b00000011, 0xFF);
}

void can_send(CAN_MSG* message) {
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
	static uint8_t buffer = 0;
	
	while(!can_transmit_done(buffer)) {
     a1a:	09 c0       	rjmp	.+18     	; 0xa2e <can_send+0x22>
		buffer++;
     a1c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
		if(buffer > 2) {
     a26:	83 30       	cpi	r24, 0x03	; 3
     a28:	10 f0       	brcs	.+4      	; 0xa2e <can_send+0x22>
			buffer = 0;
     a2a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <__data_end>
}

void can_send(CAN_MSG* message) {
	static uint8_t buffer = 0;
	
	while(!can_transmit_done(buffer)) {
     a2e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     a32:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <can_transmit_done>
     a36:	88 23       	and	r24, r24
     a38:	89 f3       	breq	.-30     	; 0xa1c <can_send+0x10>
		if(buffer > 2) {
			buffer = 0;
		}
	}

	uint8_t id_high = (uint8_t) (message->id >> 3);
     a3a:	08 81       	ld	r16, Y
     a3c:	19 81       	ldd	r17, Y+1	; 0x01
	uint8_t id_low = (uint8_t)((message->id) << 5);

	uint8_t length = message->length;
     a3e:	ea 80       	ldd	r14, Y+2	; 0x02
	
	
	mcp2515_write(id_high, MCP_TXB0SIDH + 0x10 * buffer);
     a40:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__data_end>
     a44:	62 95       	swap	r22
     a46:	60 7f       	andi	r22, 0xF0	; 240
     a48:	6f 5c       	subi	r22, 0xCF	; 207
     a4a:	c8 01       	movw	r24, r16
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	0e 94 63 07 	call	0xec6	; 0xec6 <mcp2515_write>
	mcp2515_write(id_low, MCP_TXB0SIDL + 0x10 * buffer);
     a5c:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__data_end>
     a60:	62 95       	swap	r22
     a62:	60 7f       	andi	r22, 0xF0	; 240
     a64:	6e 5c       	subi	r22, 0xCE	; 206
     a66:	80 2f       	mov	r24, r16
     a68:	82 95       	swap	r24
     a6a:	88 0f       	add	r24, r24
     a6c:	80 7e       	andi	r24, 0xE0	; 224
     a6e:	0e 94 63 07 	call	0xec6	; 0xec6 <mcp2515_write>
	mcp2515_write(length, MCP_TXB0DLC + 0x10 * buffer);
     a72:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__data_end>
     a76:	62 95       	swap	r22
     a78:	60 7f       	andi	r22, 0xF0	; 240
     a7a:	6b 5c       	subi	r22, 0xCB	; 203
     a7c:	8e 2d       	mov	r24, r14
     a7e:	0e 94 63 07 	call	0xec6	; 0xec6 <mcp2515_write>
	
	for(unsigned int i = 0; i < length; i++) {
     a82:	f1 2c       	mov	r15, r1
     a84:	e1 14       	cp	r14, r1
     a86:	f1 04       	cpc	r15, r1
     a88:	b1 f0       	breq	.+44     	; 0xab6 <can_send+0xaa>
     a8a:	8e 01       	movw	r16, r28
     a8c:	0d 5f       	subi	r16, 0xFD	; 253
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(message->data[i], (MCP_TXB0DB0 + 0x10 * buffer)+i);
     a94:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     a98:	6c 2f       	mov	r22, r28
     a9a:	90 e1       	ldi	r25, 0x10	; 16
     a9c:	89 9f       	mul	r24, r25
     a9e:	60 0d       	add	r22, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	6a 5c       	subi	r22, 0xCA	; 202
     aa4:	f8 01       	movw	r30, r16
     aa6:	81 91       	ld	r24, Z+
     aa8:	8f 01       	movw	r16, r30
     aaa:	0e 94 63 07 	call	0xec6	; 0xec6 <mcp2515_write>
	
	mcp2515_write(id_high, MCP_TXB0SIDH + 0x10 * buffer);
	mcp2515_write(id_low, MCP_TXB0SIDL + 0x10 * buffer);
	mcp2515_write(length, MCP_TXB0DLC + 0x10 * buffer);
	
	for(unsigned int i = 0; i < length; i++) {
     aae:	21 96       	adiw	r28, 0x01	; 1
     ab0:	ce 15       	cp	r28, r14
     ab2:	df 05       	cpc	r29, r15
     ab4:	79 f7       	brne	.-34     	; 0xa94 <can_send+0x88>
		mcp2515_write(message->data[i], (MCP_TXB0DB0 + 0x10 * buffer)+i);
	}
	
	mcp2515_request_to_send(buffer);
     ab6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     aba:	0e 94 98 07 	call	0xf30	; 0xf30 <mcp2515_request_to_send>
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	08 95       	ret

00000acc <joystick_calibrate>:

int8_t joystick_get_left_button(void) {
	int8_t left_button = ((1 << LEFT_BUTTON) & PINB);

	return left_button;
}
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 a7 03 	call	0x74e	; 0x74e <adc_read>
     ad6:	c3 e5       	ldi	r28, 0x53	; 83
     ad8:	d2 e0       	ldi	r29, 0x02	; 2
     ada:	88 83       	st	Y, r24
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 a7 03 	call	0x74e	; 0x74e <adc_read>
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <joystick_init>:
     aea:	88 b3       	in	r24, 0x18	; 24
     aec:	83 60       	ori	r24, 0x03	; 3
     aee:	88 bb       	out	0x18, r24	; 24
     af0:	b8 98       	cbi	0x17, 0	; 23
     af2:	94 9a       	sbi	0x12, 4	; 18
     af4:	8c 98       	cbi	0x11, 4	; 17
     af6:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
     afa:	0e 94 66 05 	call	0xacc	; 0xacc <joystick_calibrate>
     afe:	08 95       	ret

00000b00 <joystick_getpos>:
     b00:	cf 93       	push	r28
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 a7 03 	call	0x74e	; 0x74e <adc_read>
     b08:	c8 2f       	mov	r28, r24
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 a7 03 	call	0x74e	; 0x74e <adc_read>
     b10:	98 2f       	mov	r25, r24
     b12:	8c 2f       	mov	r24, r28
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <joystick_getpos_percent>:
     b18:	0e 94 80 05 	call	0xb00	; 0xb00 <joystick_getpos>
     b1c:	29 2f       	mov	r18, r25
     b1e:	48 2f       	mov	r20, r24
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <neutral_pos>
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	cb 01       	movw	r24, r22
     b2a:	0a 97       	sbiw	r24, 0x0a	; 10
     b2c:	48 17       	cp	r20, r24
     b2e:	59 07       	cpc	r21, r25
     b30:	5c f4       	brge	.+22     	; 0xb48 <joystick_getpos_percent+0x30>
     b32:	34 e6       	ldi	r19, 0x64	; 100
     b34:	34 9f       	mul	r19, r20
     b36:	c0 01       	movw	r24, r0
     b38:	35 9f       	mul	r19, r21
     b3a:	90 0d       	add	r25, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     b42:	42 e9       	ldi	r20, 0x92	; 146
     b44:	46 0f       	add	r20, r22
     b46:	1a c0       	rjmp	.+52     	; 0xb7c <joystick_getpos_percent+0x64>
     b48:	cb 01       	movw	r24, r22
     b4a:	0a 96       	adiw	r24, 0x0a	; 10
     b4c:	84 17       	cp	r24, r20
     b4e:	95 07       	cpc	r25, r21
     b50:	a4 f4       	brge	.+40     	; 0xb7a <joystick_getpos_percent+0x62>
     b52:	46 1b       	sub	r20, r22
     b54:	57 0b       	sbc	r21, r23
     b56:	4a 50       	subi	r20, 0x0A	; 10
     b58:	51 09       	sbc	r21, r1
     b5a:	34 e6       	ldi	r19, 0x64	; 100
     b5c:	34 9f       	mul	r19, r20
     b5e:	c0 01       	movw	r24, r0
     b60:	35 9f       	mul	r19, r21
     b62:	90 0d       	add	r25, r0
     b64:	11 24       	eor	r1, r1
     b66:	45 ef       	ldi	r20, 0xF5	; 245
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	fa 01       	movw	r30, r20
     b6c:	e6 1b       	sub	r30, r22
     b6e:	f7 0b       	sbc	r31, r23
     b70:	bf 01       	movw	r22, r30
     b72:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     b76:	46 2f       	mov	r20, r22
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <joystick_getpos_percent+0x64>
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <neutral_pos+0x1>
     b82:	68 2f       	mov	r22, r24
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	cb 01       	movw	r24, r22
     b88:	0a 97       	sbiw	r24, 0x0a	; 10
     b8a:	28 17       	cp	r18, r24
     b8c:	39 07       	cpc	r19, r25
     b8e:	5c f4       	brge	.+22     	; 0xba6 <joystick_getpos_percent+0x8e>
     b90:	54 e6       	ldi	r21, 0x64	; 100
     b92:	52 9f       	mul	r21, r18
     b94:	c0 01       	movw	r24, r0
     b96:	53 9f       	mul	r21, r19
     b98:	90 0d       	add	r25, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     ba0:	92 e9       	ldi	r25, 0x92	; 146
     ba2:	96 0f       	add	r25, r22
     ba4:	1a c0       	rjmp	.+52     	; 0xbda <joystick_getpos_percent+0xc2>
     ba6:	cb 01       	movw	r24, r22
     ba8:	0a 96       	adiw	r24, 0x0a	; 10
     baa:	82 17       	cp	r24, r18
     bac:	93 07       	cpc	r25, r19
     bae:	a4 f4       	brge	.+40     	; 0xbd8 <joystick_getpos_percent+0xc0>
     bb0:	26 1b       	sub	r18, r22
     bb2:	37 0b       	sbc	r19, r23
     bb4:	2a 50       	subi	r18, 0x0A	; 10
     bb6:	31 09       	sbc	r19, r1
     bb8:	54 e6       	ldi	r21, 0x64	; 100
     bba:	52 9f       	mul	r21, r18
     bbc:	c0 01       	movw	r24, r0
     bbe:	53 9f       	mul	r21, r19
     bc0:	90 0d       	add	r25, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	25 ef       	ldi	r18, 0xF5	; 245
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	e6 1b       	sub	r30, r22
     bcc:	f7 0b       	sbc	r31, r23
     bce:	bf 01       	movw	r22, r30
     bd0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     bd4:	96 2f       	mov	r25, r22
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <joystick_getpos_percent+0xc2>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	84 2f       	mov	r24, r20
     bdc:	08 95       	ret

00000bde <joystick_getdir>:
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	0e 94 8c 05 	call	0xb18	; 0xb18 <joystick_getpos_percent>
     bf0:	d8 2f       	mov	r29, r24
     bf2:	c9 2f       	mov	r28, r25
     bf4:	68 2f       	mov	r22, r24
     bf6:	88 0f       	add	r24, r24
     bf8:	77 0b       	sbc	r23, r23
     bfa:	88 0b       	sbc	r24, r24
     bfc:	99 0b       	sbc	r25, r25
     bfe:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__floatsisf>
     c02:	6b 01       	movw	r12, r22
     c04:	7c 01       	movw	r14, r24
     c06:	6c 2f       	mov	r22, r28
     c08:	0c 2e       	mov	r0, r28
     c0a:	00 0c       	add	r0, r0
     c0c:	77 0b       	sbc	r23, r23
     c0e:	88 0b       	sbc	r24, r24
     c10:	99 0b       	sbc	r25, r25
     c12:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__floatsisf>
     c16:	a7 01       	movw	r20, r14
     c18:	96 01       	movw	r18, r12
     c1a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <atan2>
     c1e:	d1 11       	cpse	r29, r1
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <joystick_getdir+0x4a>
     c22:	cc 23       	and	r28, r28
     c24:	09 f4       	brne	.+2      	; 0xc28 <joystick_getdir+0x4a>
     c26:	63 c0       	rjmp	.+198    	; 0xcee <joystick_getdir+0x110>
     c28:	2b ed       	ldi	r18, 0xDB	; 219
     c2a:	3f e0       	ldi	r19, 0x0F	; 15
     c2c:	49 e4       	ldi	r20, 0x49	; 73
     c2e:	50 e4       	ldi	r21, 0x40	; 64
     c30:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__divsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	44 e3       	ldi	r20, 0x34	; 52
     c3a:	53 e4       	ldi	r21, 0x43	; 67
     c3c:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	44 e3       	ldi	r20, 0x34	; 52
     c4a:	52 e4       	ldi	r21, 0x42	; 66
     c4c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__gesf2>
     c50:	88 23       	and	r24, r24
     c52:	5c f0       	brlt	.+22     	; 0xc6a <joystick_getdir+0x8c>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	47 e0       	ldi	r20, 0x07	; 7
     c5a:	53 e4       	ldi	r21, 0x43	; 67
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__cmpsf2>
     c64:	88 23       	and	r24, r24
     c66:	0c f4       	brge	.+2      	; 0xc6a <joystick_getdir+0x8c>
     c68:	44 c0       	rjmp	.+136    	; 0xcf2 <joystick_getdir+0x114>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	47 e0       	ldi	r20, 0x07	; 7
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__gesf2>
     c7a:	88 23       	and	r24, r24
     c7c:	0c f0       	brlt	.+2      	; 0xc80 <joystick_getdir+0xa2>
     c7e:	3b c0       	rjmp	.+118    	; 0xcf6 <joystick_getdir+0x118>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	47 e0       	ldi	r20, 0x07	; 7
     c86:	53 ec       	ldi	r21, 0xC3	; 195
     c88:	c7 01       	movw	r24, r14
     c8a:	b6 01       	movw	r22, r12
     c8c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__cmpsf2>
     c90:	18 16       	cp	r1, r24
     c92:	9c f5       	brge	.+102    	; 0xcfa <joystick_getdir+0x11c>
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	47 e0       	ldi	r20, 0x07	; 7
     c9a:	53 ec       	ldi	r21, 0xC3	; 195
     c9c:	c7 01       	movw	r24, r14
     c9e:	b6 01       	movw	r22, r12
     ca0:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__gesf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	54 f4       	brge	.+20     	; 0xcbc <joystick_getdir+0xde>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	44 e3       	ldi	r20, 0x34	; 52
     cae:	52 ec       	ldi	r21, 0xC2	; 194
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__cmpsf2>
     cb8:	18 16       	cp	r1, r24
     cba:	0c f5       	brge	.+66     	; 0xcfe <joystick_getdir+0x120>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	44 e3       	ldi	r20, 0x34	; 52
     cc2:	52 ec       	ldi	r21, 0xC2	; 194
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__gesf2>
     ccc:	18 16       	cp	r1, r24
     cce:	cc f4       	brge	.+50     	; 0xd02 <joystick_getdir+0x124>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	44 e3       	ldi	r20, 0x34	; 52
     cd6:	52 e4       	ldi	r21, 0x42	; 66
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__cmpsf2>
     ce0:	88 1f       	adc	r24, r24
     ce2:	88 27       	eor	r24, r24
     ce4:	88 1f       	adc	r24, r24
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	98 1b       	sub	r25, r24
     cea:	89 2f       	mov	r24, r25
     cec:	0b c0       	rjmp	.+22     	; 0xd04 <joystick_getdir+0x126>
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	09 c0       	rjmp	.+18     	; 0xd04 <joystick_getdir+0x126>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <joystick_getdir+0x126>
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <joystick_getdir+0x126>
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <joystick_getdir+0x126>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <joystick_getdir+0x126>
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <joystick_send_pos>:
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	2b 97       	sbiw	r28, 0x0b	; 11
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	0e 94 8c 05 	call	0xb18	; 0xb18 <joystick_getpos_percent>
     d34:	e8 2e       	mov	r14, r24
     d36:	f9 2e       	mov	r15, r25
     d38:	0e 94 ef 05 	call	0xbde	; 0xbde <joystick_getdir>
     d3c:	08 2f       	mov	r16, r24
     d3e:	16 b3       	in	r17, 0x16	; 22
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	0e 94 a7 03 	call	0x74e	; 0x74e <adc_read>
     d46:	22 e0       	ldi	r18, 0x02	; 2
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	3a 83       	std	Y+2, r19	; 0x02
     d4c:	29 83       	std	Y+1, r18	; 0x01
     d4e:	ec 82       	std	Y+4, r14	; 0x04
     d50:	fd 82       	std	Y+5, r15	; 0x05
     d52:	0e 83       	std	Y+6, r16	; 0x06
     d54:	12 70       	andi	r17, 0x02	; 2
     d56:	1f 83       	std	Y+7, r17	; 0x07
     d58:	88 87       	std	Y+8, r24	; 0x08
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 06 05 	call	0xa0c	; 0xa0c <can_send>
     d66:	2b 96       	adiw	r28, 0x0b	; 11
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	08 95       	ret

00000d80 <joystick_get_joystick_button>:

int8_t joystick_get_joystick_button(void) {
	int8_t joystick_button = ((1 << JOYSTICK_BUTTON) & PIND);
     d80:	80 b3       	in	r24, 0x10	; 16

	return joystick_button;
     d82:	80 71       	andi	r24, 0x10	; 16
     d84:	08 95       	ret

00000d86 <linkedList_createNode>:
#include "linkedList.h"

struct Node* linkedList_createNode(char* data) {
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
	struct Node* temp = (struct Node *) malloc(sizeof(struct Node)*2);
     d8c:	86 e2       	ldi	r24, 0x26	; 38
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 0f 11 	call	0x221e	; 0x221e <malloc>
     d94:	bc 01       	movw	r22, r24
     d96:	ae 01       	movw	r20, r28
     d98:	dc 01       	movw	r26, r24
     d9a:	19 96       	adiw	r26, 0x09	; 9
	for(int i = 0; i < strlen(data); i++) {
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	06 c0       	rjmp	.+12     	; 0xdae <linkedList_createNode+0x28>
		temp->data[i] = data[i];
     da2:	fa 01       	movw	r30, r20
     da4:	91 91       	ld	r25, Z+
     da6:	af 01       	movw	r20, r30
     da8:	9d 93       	st	X+, r25
#include "linkedList.h"

struct Node* linkedList_createNode(char* data) {
	struct Node* temp = (struct Node *) malloc(sizeof(struct Node)*2);
	for(int i = 0; i < strlen(data); i++) {
     daa:	2f 5f       	subi	r18, 0xFF	; 255
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	fe 01       	movw	r30, r28
     db0:	01 90       	ld	r0, Z+
     db2:	00 20       	and	r0, r0
     db4:	e9 f7       	brne	.-6      	; 0xdb0 <linkedList_createNode+0x2a>
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	ec 1b       	sub	r30, r28
     dba:	fd 0b       	sbc	r31, r29
     dbc:	2e 17       	cp	r18, r30
     dbe:	3f 07       	cpc	r19, r31
     dc0:	80 f3       	brcs	.-32     	; 0xda2 <linkedList_createNode+0x1c>
		temp->data[i] = data[i];
	}
	temp->next = NULL;
     dc2:	fb 01       	movw	r30, r22
     dc4:	11 82       	std	Z+1, r1	; 0x01
     dc6:	10 82       	st	Z, r1
	temp->prev = NULL;
     dc8:	13 82       	std	Z+3, r1	; 0x03
     dca:	12 82       	std	Z+2, r1	; 0x02
	temp->parent = NULL;
     dcc:	15 82       	std	Z+5, r1	; 0x05
     dce:	14 82       	std	Z+4, r1	; 0x04
	temp->child = NULL;
     dd0:	17 82       	std	Z+7, r1	; 0x07
     dd2:	16 82       	std	Z+6, r1	; 0x06
	temp->label = 0;
     dd4:	10 86       	std	Z+8, r1	; 0x08
	
	return temp;
     dd6:	cb 01       	movw	r24, r22
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <main>:
#include "spi.h"
#include "mcp2515.h"
#include "can.h"


int main(void) {
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	2e 97       	sbiw	r28, 0x0e	; 14
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
	FILE uartio = FDEV_SETUP_STREAM(UART_Transmit, UART_Recieve, _FDEV_SETUP_RW);
     df2:	fe 01       	movw	r30, r28
     df4:	31 96       	adiw	r30, 0x01	; 1
     df6:	8e e0       	ldi	r24, 0x0E	; 14
     df8:	df 01       	movw	r26, r30
     dfa:	1d 92       	st	X+, r1
     dfc:	8a 95       	dec	r24
     dfe:	e9 f7       	brne	.-6      	; 0xdfa <main+0x1c>
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	8c 83       	std	Y+4, r24	; 0x04
     e04:	8f e1       	ldi	r24, 0x1F	; 31
     e06:	9e e0       	ldi	r25, 0x0E	; 14
     e08:	9a 87       	std	Y+10, r25	; 0x0a
     e0a:	89 87       	std	Y+9, r24	; 0x09
     e0c:	83 e2       	ldi	r24, 0x23	; 35
     e0e:	9e e0       	ldi	r25, 0x0E	; 14
     e10:	9c 87       	std	Y+12, r25	; 0x0c
     e12:	8b 87       	std	Y+11, r24	; 0x0b
	FILE oledio = FDEV_SETUP_STREAM(OLED_write_char8, UART_Recieve, _FDEV_SETUP_RW);
	
	stdout = &uartio;
     e14:	f0 93 5e 02 	sts	0x025E, r31	; 0x80025e <__iob+0x3>
     e18:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <__iob+0x2>
		
	UART_init();
     e1c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_init>
	XMEM_init();
     e20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <XMEM_init>
	OLED_init();
     e24:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <OLED_init>
	//initializes mcp2515 and SPI
	can_init();
     e28:	0e 94 c8 03 	call	0x790	; 0x790 <can_init>
	menu_init();
     e2c:	0e 94 0b 08 	call	0x1016	; 0x1016 <menu_init>
	//initializes joystick and ADC
	joystick_init();
     e30:	0e 94 75 05 	call	0xaea	; 0xaea <joystick_init>
	OLED_reset();
     e34:	0e 94 bd 0a 	call	0x157a	; 0x157a <OLED_reset>
	
	// Set all values on SRAM to 0
	OLED_clear_SRAM();
     e38:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
	while(joystick_get_joystick_button()) {
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <main+0x90>
		OLED_print_SRAM("Press the joystick.", 3, 20, 5);
     e3e:	25 e0       	ldi	r18, 0x05	; 5
     e40:	44 e1       	ldi	r20, 0x14	; 20
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	8d e3       	ldi	r24, 0x3D	; 61
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
		OLED_circleBres(57, 28, 9);
     e50:	49 e0       	ldi	r20, 0x09	; 9
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	6c e1       	ldi	r22, 0x1C	; 28
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	89 e3       	ldi	r24, 0x39	; 57
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <OLED_circleBres>
     e60:	86 e6       	ldi	r24, 0x66	; 102
     e62:	9e e9       	ldi	r25, 0x9E	; 158
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <main+0x86>
     e68:	00 00       	nop
		_delay_ms(33);
		OLED_read_SRAM();
     e6a:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
	joystick_init();
	OLED_reset();
	
	// Set all values on SRAM to 0
	OLED_clear_SRAM();
	while(joystick_get_joystick_button()) {
     e6e:	0e 94 c0 06 	call	0xd80	; 0xd80 <joystick_get_joystick_button>
     e72:	81 11       	cpse	r24, r1
     e74:	e4 cf       	rjmp	.-56     	; 0xe3e <main+0x60>
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	af ef       	ldi	r26, 0xFF	; 255
     e7a:	b2 e0       	ldi	r27, 0x02	; 2
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	a0 40       	sbci	r26, 0x00	; 0
     e80:	b0 40       	sbci	r27, 0x00	; 0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <main+0x9e>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <main+0xa8>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <main+0xaa>
		OLED_circleBres(57, 28, 9);
		_delay_ms(33);
		OLED_read_SRAM();
	}
	_delay_ms(200);
	printf("Verification of UART\r\n");
     e88:	81 e5       	ldi	r24, 0x51	; 81
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <puts>
	while(1) {		
		//_delay_ms(20);
		//printf("Epicalyx    ");
		//joystick_send_pos();
		menu_update();
     e90:	0e 94 57 0a 	call	0x14ae	; 0x14ae <menu_update>
     e94:	86 e6       	ldi	r24, 0x66	; 102
     e96:	9e e9       	ldi	r25, 0x9E	; 158
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <main+0xba>
     e9c:	00 00       	nop
		_delay_ms(33);
		OLED_read_SRAM();
     e9e:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
     ea2:	f6 cf       	rjmp	.-20     	; 0xe90 <main+0xb2>

00000ea4 <mcp2515_read>:
	mcp2515_write(0x1D, MCP_CANINTE);
	
	return 0;
}

uint8_t mcp2515_read(uint8_t address) {
     ea4:	cf 93       	push	r28
     ea6:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << MCP2515_CS);
     ea8:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(address);
     eb0:	8c 2f       	mov	r24, r28
     eb2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(0x00);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	PORTB |= (1 << MCP2515_CS);
     ebc:	c4 9a       	sbi	0x18, 4	; 24
	uint8_t result = spi_master_receive();
     ebe:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <spi_master_receive>
	return result;
}
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <mcp2515_write>:

void mcp2515_write(uint8_t data, uint8_t address) {
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	c8 2f       	mov	r28, r24
     ecc:	d6 2f       	mov	r29, r22
	PORTB &= ~(1 << MCP2515_CS);
     ece:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(address);
     ed6:	8d 2f       	mov	r24, r29
     ed8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(data);
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	PORTB |= (1 << MCP2515_CS);
     ee2:	c4 9a       	sbi	0x18, 4	; 24
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <mcp2515_reset>:

void mcp2515_reset(void) {
	PORTB &= ~(1 << MCP2515_CS);
     eea:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	PORTB |= (1 << MCP2515_CS);
     ef2:	c4 9a       	sbi	0x18, 4	; 24
     ef4:	08 95       	ret

00000ef6 <mcp2515_init>:


uint8_t mcp2515_init(void) {

	//Setup of CS
	DDRB = (1 << MCP2515_CS);
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << MCP2515_CS);
     efa:	c4 9a       	sbi	0x18, 4	; 24

	uint8_t can_status;
	
	spi_master_init();
     efc:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <spi_master_init>
	mcp2515_reset();
     f00:	0e 94 75 07 	call	0xeea	; 0xeea <mcp2515_reset>
	
	can_status = mcp2515_read(MCP_CANSTAT);
     f04:	8e e0       	ldi	r24, 0x0E	; 14
     f06:	0e 94 52 07 	call	0xea4	; 0xea4 <mcp2515_read>
	if((can_status & MODE_MASK) != MODE_CONFIG) {
     f0a:	80 7e       	andi	r24, 0xE0	; 224
     f0c:	80 38       	cpi	r24, 0x80	; 128
     f0e:	51 f0       	breq	.+20     	; 0xf24 <mcp2515_init+0x2e>
		printf("MCP2515 is NOT in config mode.\n\r");
     f10:	87 e6       	ldi	r24, 0x67	; 103
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf>
		return 1;
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	08 95       	ret
	}
	
	mcp2515_write(0x1D, MCP_CANINTE);
     f24:	6b e2       	ldi	r22, 0x2B	; 43
     f26:	8d e1       	ldi	r24, 0x1D	; 29
     f28:	0e 94 63 07 	call	0xec6	; 0xec6 <mcp2515_write>
	
	return 0;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
}
     f2e:	08 95       	ret

00000f30 <mcp2515_request_to_send>:
	spi_master_transmit(MCP_RESET);
	PORTB |= (1 << MCP2515_CS);
}

void mcp2515_request_to_send(uint8_t transmit_buffer) {
	PORTB &= ~(1 << MCP2515_CS);
     f30:	c4 98       	cbi	0x18, 4	; 24
	switch(transmit_buffer) {
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	41 f0       	breq	.+16     	; 0xf46 <mcp2515_request_to_send+0x16>
     f36:	18 f0       	brcs	.+6      	; 0xf3e <mcp2515_request_to_send+0xe>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	49 f0       	breq	.+18     	; 0xf4e <mcp2515_request_to_send+0x1e>
     f3c:	0b c0       	rjmp	.+22     	; 0xf54 <mcp2515_request_to_send+0x24>
		case(0):
			spi_master_transmit(MCP_RTS_TX0);
     f3e:	81 e8       	ldi	r24, 0x81	; 129
     f40:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
			break;
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <mcp2515_request_to_send+0x24>
		case(1):
			spi_master_transmit(MCP_RTS_TX1);
     f46:	82 e8       	ldi	r24, 0x82	; 130
     f48:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
			break;
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <mcp2515_request_to_send+0x24>
		case(2):
			spi_master_transmit(MCP_RTS_TX2);
     f4e:	84 e8       	ldi	r24, 0x84	; 132
     f50:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
			break;
	}
	PORTB |= (1 << MCP2515_CS);
     f54:	c4 9a       	sbi	0x18, 4	; 24
     f56:	08 95       	ret

00000f58 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	18 2f       	mov	r17, r24
     f60:	d6 2f       	mov	r29, r22
     f62:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     f64:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(address);
     f6c:	81 2f       	mov	r24, r17
     f6e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(mask);
     f72:	8d 2f       	mov	r24, r29
     f74:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	spi_master_transmit(data);
     f78:	8c 2f       	mov	r24, r28
     f7a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <spi_master_transmit>
	PORTB |= (1 << MCP2515_CS);
     f7e:	c4 9a       	sbi	0x18, 4	; 24
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	08 95       	ret

00000f88 <menu_draw>:

static struct Node* currentNode = NULL;


static void menu_draw(void){
	OLED_clear_SRAM();
     f88:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
	OLED_print_SRAM(currentNode->prev->data, 0, 0, 4);
     f8c:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
     f90:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	24 e0       	ldi	r18, 0x04	; 4
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	09 96       	adiw	r24, 0x09	; 9
     fa4:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_print_SRAM(currentNode->data, 0, 43, 5);
     fa8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <currentNode>
     fac:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <currentNode+0x1>
     fb0:	25 e0       	ldi	r18, 0x05	; 5
     fb2:	4b e2       	ldi	r20, 0x2B	; 43
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	09 96       	adiw	r24, 0x09	; 9
     fbc:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_plotLine(43,8,43+8*5,8);
     fc0:	28 e0       	ldi	r18, 0x08	; 8
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	43 e5       	ldi	r20, 0x53	; 83
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	68 e0       	ldi	r22, 0x08	; 8
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	8b e2       	ldi	r24, 0x2B	; 43
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	OLED_print_SRAM(currentNode->next->data, 0, 95, 4);
     fd4:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
     fd8:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	24 e0       	ldi	r18, 0x04	; 4
     fe2:	4f e5       	ldi	r20, 0x5F	; 95
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	09 96       	adiw	r24, 0x09	; 9
     fec:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	if(currentNode->child != NULL) {
     ff0:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
     ff4:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
     ff8:	86 81       	ldd	r24, Z+6	; 0x06
     ffa:	97 81       	ldd	r25, Z+7	; 0x07
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	41 f0       	breq	.+16     	; 0x1010 <menu_draw+0x88>
		OLED_print_SRAM(currentNode->child->data, 2, 43, 4);
    1000:	24 e0       	ldi	r18, 0x04	; 4
    1002:	4b e2       	ldi	r20, 0x2B	; 43
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	09 96       	adiw	r24, 0x09	; 9
    100c:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	}
	OLED_read_SRAM();
    1010:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    1014:	08 95       	ret

00001016 <menu_init>:
}


void menu_init() {
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
	struct Node* play = linkedList_createNode("  Play  ");
    1026:	88 e8       	ldi	r24, 0x88	; 136
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    102e:	8c 01       	movw	r16, r24
	struct Node* settings = linkedList_createNode("Settings");
    1030:	81 e9       	ldi	r24, 0x91	; 145
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    1038:	ec 01       	movw	r28, r24
	struct Node* credits = linkedList_createNode("Credits ");
    103a:	8a e9       	ldi	r24, 0x9A	; 154
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    1042:	6c 01       	movw	r12, r24
	struct Node* play_joystick = linkedList_createNode("Joystick");
    1044:	83 ea       	ldi	r24, 0xA3	; 163
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    104c:	7c 01       	movw	r14, r24
	struct Node* play_slider = linkedList_createNode("Slider ");
    104e:	8c ea       	ldi	r24, 0xAC	; 172
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    1056:	fc 01       	movw	r30, r24
	
	
	play->next = settings;
    1058:	d8 01       	movw	r26, r16
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	dc 93       	st	X, r29
    105e:	ce 93       	st	-X, r28
	play->prev = credits;
    1060:	13 96       	adiw	r26, 0x03	; 3
    1062:	dc 92       	st	X, r13
    1064:	ce 92       	st	-X, r12
    1066:	12 97       	sbiw	r26, 0x02	; 2
	play->label = PLAY;
    1068:	18 96       	adiw	r26, 0x08	; 8
    106a:	1c 92       	st	X, r1
    106c:	18 97       	sbiw	r26, 0x08	; 8
	play->child = play_joystick;
    106e:	17 96       	adiw	r26, 0x07	; 7
    1070:	fc 92       	st	X, r15
    1072:	ee 92       	st	-X, r14
    1074:	16 97       	sbiw	r26, 0x06	; 6
	play->parent = play_slider;
    1076:	15 96       	adiw	r26, 0x05	; 5
    1078:	9c 93       	st	X, r25
    107a:	8e 93       	st	-X, r24
    107c:	14 97       	sbiw	r26, 0x04	; 4
	
	play_joystick->label = PLAY_JOYSTICK;
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	d7 01       	movw	r26, r14
    1082:	18 96       	adiw	r26, 0x08	; 8
    1084:	8c 93       	st	X, r24
    1086:	18 97       	sbiw	r26, 0x08	; 8
	play_joystick->parent = play;
    1088:	15 96       	adiw	r26, 0x05	; 5
    108a:	1c 93       	st	X, r17
    108c:	0e 93       	st	-X, r16
    108e:	14 97       	sbiw	r26, 0x04	; 4
	play_joystick->child = play_slider;
    1090:	17 96       	adiw	r26, 0x07	; 7
    1092:	fc 93       	st	X, r31
    1094:	ee 93       	st	-X, r30
    1096:	16 97       	sbiw	r26, 0x06	; 6
	play_joystick->next = NULL;
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	1c 92       	st	X, r1
    109c:	1e 92       	st	-X, r1
	play_joystick->prev = NULL;
    109e:	13 96       	adiw	r26, 0x03	; 3
    10a0:	1c 92       	st	X, r1
    10a2:	1e 92       	st	-X, r1
    10a4:	12 97       	sbiw	r26, 0x02	; 2
	
	play_slider->label = PLAY_SLIDER;
    10a6:	86 e0       	ldi	r24, 0x06	; 6
    10a8:	80 87       	std	Z+8, r24	; 0x08
	play_slider->parent = play_joystick;
    10aa:	f5 82       	std	Z+5, r15	; 0x05
    10ac:	e4 82       	std	Z+4, r14	; 0x04
	play_slider->child = play;
    10ae:	17 83       	std	Z+7, r17	; 0x07
    10b0:	06 83       	std	Z+6, r16	; 0x06
	
	
	settings->next = credits;
    10b2:	d9 82       	std	Y+1, r13	; 0x01
    10b4:	c8 82       	st	Y, r12
	settings->prev = play;
    10b6:	1b 83       	std	Y+3, r17	; 0x03
    10b8:	0a 83       	std	Y+2, r16	; 0x02
	settings->label = SETTINGS;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	88 87       	std	Y+8, r24	; 0x08
	
	credits->next = play;
    10be:	f6 01       	movw	r30, r12
    10c0:	11 83       	std	Z+1, r17	; 0x01
    10c2:	00 83       	st	Z, r16
	credits->prev = settings;
    10c4:	d3 83       	std	Z+3, r29	; 0x03
    10c6:	c2 83       	std	Z+2, r28	; 0x02
	credits->label = CREDITS;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	80 87       	std	Z+8, r24	; 0x08
	credits->child = NULL;
    10cc:	17 82       	std	Z+7, r1	; 0x07
    10ce:	16 82       	std	Z+6, r1	; 0x06
	
	currentNode = play;
    10d0:	10 93 56 02 	sts	0x0256, r17	; 0x800256 <currentNode+0x1>
    10d4:	00 93 55 02 	sts	0x0255, r16	; 0x800255 <currentNode>
	
	// Sub-menus
	struct Node* setting_joycal = linkedList_createNode("Joycal");
    10d8:	84 eb       	ldi	r24, 0xB4	; 180
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    10e0:	8c 01       	movw	r16, r24
	struct Node* setting_dummy = linkedList_createNode("Dummy");
    10e2:	8b eb       	ldi	r24, 0xBB	; 187
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 c3 06 	call	0xd86	; 0xd86 <linkedList_createNode>
    10ea:	fc 01       	movw	r30, r24
	
	settings->child = setting_joycal;
    10ec:	1f 83       	std	Y+7, r17	; 0x07
    10ee:	0e 83       	std	Y+6, r16	; 0x06
	settings->parent = setting_joycal;
    10f0:	1d 83       	std	Y+5, r17	; 0x05
    10f2:	0c 83       	std	Y+4, r16	; 0x04
	
	setting_joycal->parent = settings;
    10f4:	d8 01       	movw	r26, r16
    10f6:	15 96       	adiw	r26, 0x05	; 5
    10f8:	dc 93       	st	X, r29
    10fa:	ce 93       	st	-X, r28
    10fc:	14 97       	sbiw	r26, 0x04	; 4
	setting_joycal->child = settings;
    10fe:	17 96       	adiw	r26, 0x07	; 7
    1100:	dc 93       	st	X, r29
    1102:	ce 93       	st	-X, r28
    1104:	16 97       	sbiw	r26, 0x06	; 6
	setting_joycal->next = setting_dummy;
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	9c 93       	st	X, r25
    110a:	8e 93       	st	-X, r24
	setting_joycal->prev = setting_dummy;
    110c:	13 96       	adiw	r26, 0x03	; 3
    110e:	9c 93       	st	X, r25
    1110:	8e 93       	st	-X, r24
    1112:	12 97       	sbiw	r26, 0x02	; 2
	setting_joycal->label = JOYCAL;
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	18 96       	adiw	r26, 0x08	; 8
    1118:	8c 93       	st	X, r24
	
	setting_dummy->parent = settings;
    111a:	d5 83       	std	Z+5, r29	; 0x05
    111c:	c4 83       	std	Z+4, r28	; 0x04
	setting_dummy->child = settings;
    111e:	d7 83       	std	Z+7, r29	; 0x07
    1120:	c6 83       	std	Z+6, r28	; 0x06
	setting_dummy->next = setting_joycal;
    1122:	11 83       	std	Z+1, r17	; 0x01
    1124:	00 83       	st	Z, r16
	setting_dummy->prev = setting_joycal;
    1126:	13 83       	std	Z+3, r17	; 0x03
    1128:	02 83       	std	Z+2, r16	; 0x02
	setting_dummy->label = DUMMY;
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	80 87       	std	Z+8, r24	; 0x08
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	08 95       	ret

00001140 <menu_navigate>:
	}
	menu_draw();
}

void menu_navigate(JOY_DIR joydir) {
	switch(joydir) {
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	69 f1       	breq	.+90     	; 0x119e <menu_navigate+0x5e>
    1144:	f8 f0       	brcs	.+62     	; 0x1184 <menu_navigate+0x44>
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	19 f0       	breq	.+6      	; 0x1150 <menu_navigate+0x10>
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	71 f0       	breq	.+28     	; 0x116a <menu_navigate+0x2a>
    114e:	08 95       	ret
		case(LEFT):
			if(currentNode->prev != NULL) {
    1150:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
    1154:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	59 f1       	breq	.+86     	; 0x11b6 <menu_navigate+0x76>
				currentNode = currentNode->prev;
    1160:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <currentNode+0x1>
    1164:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <currentNode>
    1168:	08 95       	ret
			}
			break;
		case(RIGHT):
			if(currentNode->next != NULL) {
    116a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
    116e:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	f1 f0       	breq	.+60     	; 0x11b6 <menu_navigate+0x76>
				currentNode = currentNode->next;
    117a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <currentNode+0x1>
    117e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <currentNode>
    1182:	08 95       	ret
			}
			break;
		case(UP):
			if(currentNode->parent != NULL) {
    1184:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
    1188:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
    118c:	84 81       	ldd	r24, Z+4	; 0x04
    118e:	95 81       	ldd	r25, Z+5	; 0x05
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	89 f0       	breq	.+34     	; 0x11b6 <menu_navigate+0x76>
				currentNode = currentNode->parent;
    1194:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <currentNode+0x1>
    1198:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <currentNode>
    119c:	08 95       	ret
			}
			break;
		case(DOWN):
			if(currentNode->child != NULL) {
    119e:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
    11a2:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
    11a6:	86 81       	ldd	r24, Z+6	; 0x06
    11a8:	97 81       	ldd	r25, Z+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <menu_navigate+0x76>
				currentNode = currentNode->child;
    11ae:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <currentNode+0x1>
    11b2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <currentNode>
    11b6:	08 95       	ret

000011b8 <menu_select_play>:
			menu_select_joycal();
			break;
	}
}

void menu_select_play(CONTROLLER_MODE mode) {
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	65 97       	sbiw	r28, 0x15	; 21
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	18 2f       	mov	r17, r24
	OLED_clear_SRAM();
    11d4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	80 40       	sbci	r24, 0x00	; 0
    11e2:	90 40       	sbci	r25, 0x00	; 0
    11e4:	e1 f7       	brne	.-8      	; 0x11de <menu_select_play+0x26>
    11e6:	00 c0       	rjmp	.+0      	; 0x11e8 <menu_select_play+0x30>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <menu_select_play+0x32>
	_delay_ms(200);
	
	// Send message to node 2 that the game is starting
	CAN_MSG msg_game_status;
	msg_game_status.data[0] = 0x1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	8c 83       	std	Y+4, r24	; 0x04
	msg_game_status.data[1] = mode;
    11ee:	1d 83       	std	Y+5, r17	; 0x05
	msg_game_status.length = 0x02;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	8b 83       	std	Y+3, r24	; 0x03
	msg_game_status.id = MSG_ID_GAME_STATUS;
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
	can_send(&msg_game_status);
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	0e 94 06 05 	call	0xa0c	; 0xa0c <can_send>

	JOY_POS pos = joystick_getpos();
    1204:	0e 94 80 05 	call	0xb00	; 0xb00 <joystick_getpos>
	OLED_draw_Racket(50, 30);
    1208:	6e e1       	ldi	r22, 0x1E	; 30
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	82 e3       	ldi	r24, 0x32	; 50
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 a1 0c 	call	0x1942	; 0x1942 <OLED_draw_Racket>
	OLED_read_SRAM();
    1214:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
	int score = 0;
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	10 e0       	ldi	r17, 0x00	; 0
			set_score_flag(0);

			while(joystick_get_joystick_button());

			_delay_ms(200);
			msg_game_status.data[0] = 0x1;
    121c:	ff 24       	eor	r15, r15
    121e:	f3 94       	inc	r15
	OLED_draw_Racket(50, 30);
	OLED_read_SRAM();
	int score = 0;
	char score_c[10];
	
	while(joystick_get_joystick_button()) {
    1220:	4d c0       	rjmp	.+154    	; 0x12bc <menu_select_play+0x104>
		if(get_score_flag()) {
    1222:	0e 94 be 03 	call	0x77c	; 0x77c <get_score_flag>
    1226:	89 2b       	or	r24, r25
    1228:	09 f4       	brne	.+2      	; 0x122c <menu_select_play+0x74>
    122a:	46 c0       	rjmp	.+140    	; 0x12b8 <menu_select_play+0x100>
			score++;
    122c:	0f 5f       	subi	r16, 0xFF	; 255
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
			OLED_clear_SRAM();
    1230:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
			OLED_print_SRAM("Press to resume.", 0, 25, 5);
    1234:	25 e0       	ldi	r18, 0x05	; 5
    1236:	49 e1       	ldi	r20, 0x19	; 25
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	81 ec       	ldi	r24, 0xC1	; 193
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
			OLED_print_SRAM("Points lost: ", 2, 30, 5);
    1246:	25 e0       	ldi	r18, 0x05	; 5
    1248:	4e e1       	ldi	r20, 0x1E	; 30
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	82 ed       	ldi	r24, 0xD2	; 210
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1258:	4a e0       	ldi	r20, 0x0A	; 10
    125a:	be 01       	movw	r22, r28
    125c:	64 5f       	subi	r22, 0xF4	; 244
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	c8 01       	movw	r24, r16
    1262:	0e 94 30 12 	call	0x2460	; 0x2460 <__itoa_ncheck>
			OLED_print_SRAM(itoa(score, score_c, 10), 2, 95, 5);
    1266:	25 e0       	ldi	r18, 0x05	; 5
    1268:	4f e5       	ldi	r20, 0x5F	; 95
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	62 e0       	ldi	r22, 0x02	; 2
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
			OLED_read_SRAM();
    1274:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
			set_score_flag(0);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 c3 03 	call	0x786	; 0x786 <set_score_flag>

			while(joystick_get_joystick_button());
    1280:	0e 94 c0 06 	call	0xd80	; 0xd80 <joystick_get_joystick_button>
    1284:	81 11       	cpse	r24, r1
    1286:	fc cf       	rjmp	.-8      	; 0x1280 <menu_select_play+0xc8>
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	80 40       	sbci	r24, 0x00	; 0
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <menu_select_play+0xd6>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <menu_select_play+0xe0>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <menu_select_play+0xe2>

			_delay_ms(200);
			msg_game_status.data[0] = 0x1;
    129a:	fc 82       	std	Y+4, r15	; 0x04
			can_send(&msg_game_status);
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 06 05 	call	0xa0c	; 0xa0c <can_send>
			OLED_clear_SRAM();
    12a4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
			OLED_draw_Racket(50, 30);
    12a8:	6e e1       	ldi	r22, 0x1E	; 30
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	82 e3       	ldi	r24, 0x32	; 50
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <OLED_draw_Racket>
			OLED_read_SRAM();
    12b4:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
		//pos = joystick_getpos();
		//OLED_draw_Racket(pos.x/8, pos.y/8);
		//OLED_read_SRAM();
		//_delay_ms(33);
		//OLED_clear_SRAM();
		joystick_send_pos();
    12b8:	0e 94 8a 06 	call	0xd14	; 0xd14 <joystick_send_pos>
	OLED_draw_Racket(50, 30);
	OLED_read_SRAM();
	int score = 0;
	char score_c[10];
	
	while(joystick_get_joystick_button()) {
    12bc:	0e 94 c0 06 	call	0xd80	; 0xd80 <joystick_get_joystick_button>
    12c0:	81 11       	cpse	r24, r1
    12c2:	af cf       	rjmp	.-162    	; 0x1222 <menu_select_play+0x6a>
		//OLED_read_SRAM();
		//_delay_ms(33);
		//OLED_clear_SRAM();
		joystick_send_pos();
	}
	msg_game_status.data[0] = 0x0;
    12c4:	1c 82       	std	Y+4, r1	; 0x04
	can_send(&msg_game_status);
    12c6:	ce 01       	movw	r24, r28
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	0e 94 06 05 	call	0xa0c	; 0xa0c <can_send>
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	80 40       	sbci	r24, 0x00	; 0
    12d8:	90 40       	sbci	r25, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <menu_select_play+0x11c>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <menu_select_play+0x126>
    12de:	00 c0       	rjmp	.+0      	; 0x12e0 <menu_select_play+0x128>
	_delay_ms(200);
}
    12e0:	65 96       	adiw	r28, 0x15	; 21
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	08 95       	ret

000012f8 <menu_select_credits>:

void menu_select_credits(void) {
	OLED_clear_SRAM();
    12f8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
	OLED_print_SRAM("Team Epicalyx: ", 0, 0, 8);
    12fc:	28 e0       	ldi	r18, 0x08	; 8
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 ee       	ldi	r24, 0xE0	; 224
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_print_SRAM("Vegard Haraldstad", 1, 2, 5);
    130e:	25 e0       	ldi	r18, 0x05	; 5
    1310:	42 e0       	ldi	r20, 0x02	; 2
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 ef       	ldi	r24, 0xF0	; 240
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_print_SRAM("Thomas Borge", 2, 2, 5);
    1320:	25 e0       	ldi	r18, 0x05	; 5
    1322:	42 e0       	ldi	r20, 0x02	; 2
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	62 e0       	ldi	r22, 0x02	; 2
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_print_SRAM("Mikael Medina", 3, 2, 5);
    1332:	25 e0       	ldi	r18, 0x05	; 5
    1334:	42 e0       	ldi	r20, 0x02	; 2
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	63 e0       	ldi	r22, 0x03	; 3
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	8f e0       	ldi	r24, 0x0F	; 15
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_plotLine(0, 7, 116, 7);
    1344:	27 e0       	ldi	r18, 0x07	; 7
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	44 e7       	ldi	r20, 0x74	; 116
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	67 e0       	ldi	r22, 0x07	; 7
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	OLED_read_SRAM();
    1358:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <menu_select_credits+0x6a>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <menu_select_credits+0x74>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <menu_select_credits+0x76>
	_delay_ms(200);
	while(joystick_get_joystick_button());
    136e:	0e 94 c0 06 	call	0xd80	; 0xd80 <joystick_get_joystick_button>
    1372:	81 11       	cpse	r24, r1
    1374:	fc cf       	rjmp	.-8      	; 0x136e <menu_select_credits+0x76>
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <menu_select_credits+0x84>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <menu_select_credits+0x8e>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <menu_select_credits+0x90>
    1388:	08 95       	ret

0000138a <menu_select_joycal>:
	_delay_ms(200);
}

void menu_select_joycal() {
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	2f ef       	ldi	r18, 0xFF	; 255
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	21 50       	subi	r18, 0x01	; 1
    139a:	80 40       	sbci	r24, 0x00	; 0
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <menu_select_joycal+0xe>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <menu_select_joycal+0x18>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <menu_select_joycal+0x1a>
	_delay_ms(200);
	OLED_clear_SRAM();
    13a4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <OLED_clear_SRAM>
	OLED_print_SRAM("Please let go of the joystick", 0, 5, 4);
    13a8:	24 e0       	ldi	r18, 0x04	; 4
    13aa:	45 e0       	ldi	r20, 0x05	; 5
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	8d e1       	ldi	r24, 0x1D	; 29
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_read_SRAM();
    13ba:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	9e e0       	ldi	r25, 0x0E	; 14
    13c4:	21 50       	subi	r18, 0x01	; 1
    13c6:	80 40       	sbci	r24, 0x00	; 0
    13c8:	90 40       	sbci	r25, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <menu_select_joycal+0x3a>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <menu_select_joycal+0x44>
    13ce:	00 00       	nop
    13d0:	03 e1       	ldi	r16, 0x13	; 19
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	c4 e1       	ldi	r28, 0x14	; 20
    13d6:	d0 e0       	ldi	r29, 0x00	; 0
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <menu_select_joycal+0x56>
    13da:	21 97       	sbiw	r28, 0x01	; 1
    13dc:	01 50       	subi	r16, 0x01	; 1
    13de:	11 09       	sbc	r17, r1
	_delay_ms(1000);	
	for(int i = 20; i > 0; i--){
		if(i == 10) {joystick_calibrate();}
    13e0:	ca 30       	cpi	r28, 0x0A	; 10
    13e2:	d1 05       	cpc	r29, r1
    13e4:	b1 f4       	brne	.+44     	; 0x1412 <menu_select_joycal+0x88>
    13e6:	0e 94 66 05 	call	0xacc	; 0xacc <joystick_calibrate>
		OLED_circleBres(64,30,i);
    13ea:	4a e0       	ldi	r20, 0x0A	; 10
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	6e e1       	ldi	r22, 0x1E	; 30
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	80 e4       	ldi	r24, 0x40	; 64
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <OLED_circleBres>
		OLED_read_SRAM();
    13fa:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <menu_select_joycal+0x7a>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <menu_select_joycal+0x84>
    140e:	00 c0       	rjmp	.+0      	; 0x1410 <menu_select_joycal+0x86>
    1410:	e4 cf       	rjmp	.-56     	; 0x13da <menu_select_joycal+0x50>
	OLED_print_SRAM("Please let go of the joystick", 0, 5, 4);
	OLED_read_SRAM();
	_delay_ms(1000);	
	for(int i = 20; i > 0; i--){
		if(i == 10) {joystick_calibrate();}
		OLED_circleBres(64,30,i);
    1412:	ae 01       	movw	r20, r28
    1414:	6e e1       	ldi	r22, 0x1E	; 30
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	80 e4       	ldi	r24, 0x40	; 64
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <OLED_circleBres>
		OLED_read_SRAM();
    1420:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	21 50       	subi	r18, 0x01	; 1
    142c:	80 40       	sbci	r24, 0x00	; 0
    142e:	90 40       	sbci	r25, 0x00	; 0
    1430:	e1 f7       	brne	.-8      	; 0x142a <menu_select_joycal+0xa0>
    1432:	00 c0       	rjmp	.+0      	; 0x1434 <menu_select_joycal+0xaa>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <menu_select_joycal+0xac>
	_delay_ms(200);
	OLED_clear_SRAM();
	OLED_print_SRAM("Please let go of the joystick", 0, 5, 4);
	OLED_read_SRAM();
	_delay_ms(1000);	
	for(int i = 20; i > 0; i--){
    1436:	10 16       	cp	r1, r16
    1438:	11 06       	cpc	r1, r17
    143a:	7c f2       	brlt	.-98     	; 0x13da <menu_select_joycal+0x50>
		if(i == 10) {joystick_calibrate();}
		OLED_circleBres(64,30,i);
		OLED_read_SRAM();
		_delay_ms(200);
	}
	OLED_print_SRAM("Joystick calibrated", 6, 25, 4);
    143c:	24 e0       	ldi	r18, 0x04	; 4
    143e:	49 e1       	ldi	r20, 0x19	; 25
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	66 e0       	ldi	r22, 0x06	; 6
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	8b e3       	ldi	r24, 0x3B	; 59
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	0e 94 47 0b 	call	0x168e	; 0x168e <OLED_print_SRAM>
	OLED_read_SRAM();
    144e:	0e 94 cd 0a 	call	0x159a	; 0x159a <OLED_read_SRAM>
    1452:	2f ef       	ldi	r18, 0xFF	; 255
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9d e1       	ldi	r25, 0x1D	; 29
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	80 40       	sbci	r24, 0x00	; 0
    145c:	90 40       	sbci	r25, 0x00	; 0
    145e:	e1 f7       	brne	.-8      	; 0x1458 <menu_select_joycal+0xce>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <menu_select_joycal+0xd8>
    1462:	00 00       	nop
	_delay_ms(2000);
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <menu_select>:
			break;
	}
}

void menu_select(void) {
	switch(currentNode->label) {
    146e:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <currentNode>
    1472:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <currentNode+0x1>
    1476:	80 85       	ldd	r24, Z+8	; 0x08
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	b1 f0       	breq	.+44     	; 0x14a8 <menu_select+0x3a>
    147c:	18 f4       	brcc	.+6      	; 0x1484 <menu_select+0x16>
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	81 f0       	breq	.+32     	; 0x14a2 <menu_select+0x34>
    1482:	08 95       	ret
    1484:	85 30       	cpi	r24, 0x05	; 5
    1486:	19 f0       	breq	.+6      	; 0x148e <menu_select+0x20>
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	31 f0       	breq	.+12     	; 0x1498 <menu_select+0x2a>
    148c:	08 95       	ret
		case(PLAY_JOYSTICK):
			menu_select_play(JOYSTICK);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <menu_select_play>
			break;
    1496:	08 95       	ret
		case(PLAY_SLIDER):
			menu_select_play(SLIDER);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <menu_select_play>
			break;
    14a0:	08 95       	ret
		case(SETTINGS):
			break;
		case(CREDITS):
			menu_select_credits();
    14a2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <menu_select_credits>
			break;
    14a6:	08 95       	ret
		case(JOYCAL):
			menu_select_joycal();
    14a8:	0e 94 c5 09 	call	0x138a	; 0x138a <menu_select_joycal>
    14ac:	08 95       	ret

000014ae <menu_update>:
	setting_dummy->next = setting_joycal;
	setting_dummy->prev = setting_joycal;
	setting_dummy->label = DUMMY;
}

void menu_update(void) {
    14ae:	cf 93       	push	r28
	JOY_DIR joydir;
	joydir = joystick_getdir();
    14b0:	0e 94 ef 05 	call	0xbde	; 0xbde <joystick_getdir>
    14b4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14b6:	20 e1       	ldi	r18, 0x10	; 16
    14b8:	2a 95       	dec	r18
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <menu_update+0xa>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <menu_update+0x10>
	_delay_us(10);
	if(!joystick_get_joystick_button()) {
    14be:	0e 94 c0 06 	call	0xd80	; 0xd80 <joystick_get_joystick_button>
    14c2:	81 11       	cpse	r24, r1
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <menu_update+0x1c>
		menu_select();
    14c6:	0e 94 37 0a 	call	0x146e	; 0x146e <menu_select>
	}
	
	if(joydir != NEUTRAL) {
    14ca:	c4 30       	cpi	r28, 0x04	; 4
    14cc:	79 f0       	breq	.+30     	; 0x14ec <menu_update+0x3e>
		menu_navigate(joydir);
    14ce:	8c 2f       	mov	r24, r28
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 a0 08 	call	0x1140	; 0x1140 <menu_navigate>
		menu_draw();
    14d6:	0e 94 c4 07 	call	0xf88	; 0xf88 <menu_draw>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f e7       	ldi	r25, 0x7F	; 127
    14de:	27 e0       	ldi	r18, 0x07	; 7
    14e0:	81 50       	subi	r24, 0x01	; 1
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	20 40       	sbci	r18, 0x00	; 0
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <menu_update+0x32>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <menu_update+0x3c>
    14ea:	00 00       	nop
		_delay_ms(500);
	}
	menu_draw();
    14ec:	0e 94 c4 07 	call	0xf88	; 0xf88 <menu_draw>
}
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <OLED_init>:
	}
}

uint16_t OLED_pos_SRAM(uint16_t row, uint16_t col) {
	return (row*128 + col);
}
    14f4:	e0 e0       	ldi	r30, 0x00	; 0
    14f6:	f0 e1       	ldi	r31, 0x10	; 16
    14f8:	8e ea       	ldi	r24, 0xAE	; 174
    14fa:	80 83       	st	Z, r24
    14fc:	81 ea       	ldi	r24, 0xA1	; 161
    14fe:	80 83       	st	Z, r24
    1500:	8a ed       	ldi	r24, 0xDA	; 218
    1502:	80 83       	st	Z, r24
    1504:	82 e1       	ldi	r24, 0x12	; 18
    1506:	80 83       	st	Z, r24
    1508:	88 ec       	ldi	r24, 0xC8	; 200
    150a:	80 83       	st	Z, r24
    150c:	88 ea       	ldi	r24, 0xA8	; 168
    150e:	80 83       	st	Z, r24
    1510:	8f e3       	ldi	r24, 0x3F	; 63
    1512:	80 83       	st	Z, r24
    1514:	85 ed       	ldi	r24, 0xD5	; 213
    1516:	80 83       	st	Z, r24
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	80 83       	st	Z, r24
    151c:	81 e8       	ldi	r24, 0x81	; 129
    151e:	80 83       	st	Z, r24
    1520:	80 e5       	ldi	r24, 0x50	; 80
    1522:	80 83       	st	Z, r24
    1524:	89 ed       	ldi	r24, 0xD9	; 217
    1526:	80 83       	st	Z, r24
    1528:	81 e2       	ldi	r24, 0x21	; 33
    152a:	80 83       	st	Z, r24
    152c:	90 e2       	ldi	r25, 0x20	; 32
    152e:	90 83       	st	Z, r25
    1530:	10 82       	st	Z, r1
    1532:	92 e2       	ldi	r25, 0x22	; 34
    1534:	90 83       	st	Z, r25
    1536:	10 82       	st	Z, r1
    1538:	97 e0       	ldi	r25, 0x07	; 7
    153a:	90 83       	st	Z, r25
    153c:	80 83       	st	Z, r24
    153e:	10 82       	st	Z, r1
    1540:	8f e7       	ldi	r24, 0x7F	; 127
    1542:	80 83       	st	Z, r24
    1544:	8b ed       	ldi	r24, 0xDB	; 219
    1546:	80 83       	st	Z, r24
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	80 83       	st	Z, r24
    154c:	8d ea       	ldi	r24, 0xAD	; 173
    154e:	80 83       	st	Z, r24
    1550:	10 82       	st	Z, r1
    1552:	84 ea       	ldi	r24, 0xA4	; 164
    1554:	80 83       	st	Z, r24
    1556:	86 ea       	ldi	r24, 0xA6	; 166
    1558:	80 83       	st	Z, r24
    155a:	8f ea       	ldi	r24, 0xAF	; 175
    155c:	80 83       	st	Z, r24
    155e:	08 95       	ret

00001560 <OLED_pos>:
    1560:	e0 e0       	ldi	r30, 0x00	; 0
    1562:	f0 e1       	ldi	r31, 0x10	; 16
    1564:	92 e2       	ldi	r25, 0x22	; 34
    1566:	90 83       	st	Z, r25
    1568:	80 83       	st	Z, r24
    156a:	87 e0       	ldi	r24, 0x07	; 7
    156c:	80 83       	st	Z, r24
    156e:	81 e2       	ldi	r24, 0x21	; 33
    1570:	80 83       	st	Z, r24
    1572:	60 83       	st	Z, r22
    1574:	8f e7       	ldi	r24, 0x7F	; 127
    1576:	80 83       	st	Z, r24
    1578:	08 95       	ret

0000157a <OLED_reset>:
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_pos>
    1582:	80 e8       	ldi	r24, 0x80	; 128
    1584:	94 e0       	ldi	r25, 0x04	; 4
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	f2 e1       	ldi	r31, 0x12	; 18
    158a:	10 82       	st	Z, r1
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	e9 f7       	brne	.-6      	; 0x158a <OLED_reset+0x10>
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_pos>
    1598:	08 95       	ret

0000159a <OLED_read_SRAM>:
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_pos>
    15a2:	e0 e0       	ldi	r30, 0x00	; 0
    15a4:	f8 e1       	ldi	r31, 0x18	; 24
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b2 e1       	ldi	r27, 0x12	; 18
    15aa:	81 91       	ld	r24, Z+
    15ac:	8c 93       	st	X, r24
    15ae:	e1 15       	cp	r30, r1
    15b0:	8c e1       	ldi	r24, 0x1C	; 28
    15b2:	f8 07       	cpc	r31, r24
    15b4:	d1 f7       	brne	.-12     	; 0x15aa <OLED_read_SRAM+0x10>
    15b6:	08 95       	ret

000015b8 <OLED_write_SRAM_char>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	76 95       	lsr	r23
    15c6:	76 2f       	mov	r23, r22
    15c8:	66 27       	eor	r22, r22
    15ca:	77 95       	ror	r23
    15cc:	67 95       	ror	r22
    15ce:	eb 01       	movw	r28, r22
    15d0:	c4 0f       	add	r28, r20
    15d2:	d5 1f       	adc	r29, r21
    15d4:	25 30       	cpi	r18, 0x05	; 5
    15d6:	f1 f0       	breq	.+60     	; 0x1614 <OLED_write_SRAM_char+0x5c>
    15d8:	28 30       	cpi	r18, 0x08	; 8
    15da:	c1 f1       	breq	.+112    	; 0x164c <OLED_write_SRAM_char+0x94>
    15dc:	24 30       	cpi	r18, 0x04	; 4
    15de:	09 f0       	breq	.+2      	; 0x15e2 <OLED_write_SRAM_char+0x2a>
    15e0:	4f c0       	rjmp	.+158    	; 0x1680 <OLED_write_SRAM_char+0xc8>
    15e2:	08 2f       	mov	r16, r24
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	00 0f       	add	r16, r16
    15e8:	11 1f       	adc	r17, r17
    15ea:	00 0f       	add	r16, r16
    15ec:	11 1f       	adc	r17, r17
    15ee:	02 5e       	subi	r16, 0xE2	; 226
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	7e 01       	movw	r14, r28
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	e8 0e       	add	r14, r24
    15f8:	f1 1c       	adc	r15, r1
    15fa:	f8 01       	movw	r30, r16
    15fc:	84 91       	lpm	r24, Z
    15fe:	be 01       	movw	r22, r28
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <XMEM_write>
    1606:	21 96       	adiw	r28, 0x01	; 1
    1608:	0f 5f       	subi	r16, 0xFF	; 255
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	ec 16       	cp	r14, r28
    160e:	fd 06       	cpc	r15, r29
    1610:	a1 f7       	brne	.-24     	; 0x15fa <OLED_write_SRAM_char+0x42>
    1612:	36 c0       	rjmp	.+108    	; 0x1680 <OLED_write_SRAM_char+0xc8>
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	80 97       	sbiw	r24, 0x20	; 32
    1618:	8c 01       	movw	r16, r24
    161a:	00 0f       	add	r16, r16
    161c:	11 1f       	adc	r17, r17
    161e:	00 0f       	add	r16, r16
    1620:	11 1f       	adc	r17, r17
    1622:	08 0f       	add	r16, r24
    1624:	19 1f       	adc	r17, r25
    1626:	06 5e       	subi	r16, 0xE6	; 230
    1628:	1d 4f       	sbci	r17, 0xFD	; 253
    162a:	7e 01       	movw	r14, r28
    162c:	f5 e0       	ldi	r31, 0x05	; 5
    162e:	ef 0e       	add	r14, r31
    1630:	f1 1c       	adc	r15, r1
    1632:	f8 01       	movw	r30, r16
    1634:	84 91       	lpm	r24, Z
    1636:	be 01       	movw	r22, r28
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <XMEM_write>
    163e:	21 96       	adiw	r28, 0x01	; 1
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	ce 15       	cp	r28, r14
    1646:	df 05       	cpc	r29, r15
    1648:	a1 f7       	brne	.-24     	; 0x1632 <OLED_write_SRAM_char+0x7a>
    164a:	1a c0       	rjmp	.+52     	; 0x1680 <OLED_write_SRAM_char+0xc8>
    164c:	08 2f       	mov	r16, r24
    164e:	10 e0       	ldi	r17, 0x00	; 0
    1650:	00 0f       	add	r16, r16
    1652:	11 1f       	adc	r17, r17
    1654:	00 0f       	add	r16, r16
    1656:	11 1f       	adc	r17, r17
    1658:	00 0f       	add	r16, r16
    165a:	11 1f       	adc	r17, r17
    165c:	0b 50       	subi	r16, 0x0B	; 11
    165e:	1d 4f       	sbci	r17, 0xFD	; 253
    1660:	7e 01       	movw	r14, r28
    1662:	f8 e0       	ldi	r31, 0x08	; 8
    1664:	ef 0e       	add	r14, r31
    1666:	f1 1c       	adc	r15, r1
    1668:	f8 01       	movw	r30, r16
    166a:	84 91       	lpm	r24, Z
    166c:	be 01       	movw	r22, r28
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <XMEM_write>
    1674:	21 96       	adiw	r28, 0x01	; 1
    1676:	0f 5f       	subi	r16, 0xFF	; 255
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	ec 16       	cp	r14, r28
    167c:	fd 06       	cpc	r15, r29
    167e:	a1 f7       	brne	.-24     	; 0x1668 <OLED_write_SRAM_char+0xb0>
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <OLED_print_SRAM>:

void OLED_print_SRAM(char* str, uint16_t row, uint16_t col, uint8_t font_size) {
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
    16a4:	6b 01       	movw	r12, r22
    16a6:	8a 01       	movw	r16, r20
    16a8:	a2 2e       	mov	r10, r18
	for(uint8_t i = 0; i < strlen(str); i++) {
    16aa:	b1 2c       	mov	r11, r1
    16ac:	e2 2e       	mov	r14, r18
    16ae:	f1 2c       	mov	r15, r1
    16b0:	0c c0       	rjmp	.+24     	; 0x16ca <OLED_print_SRAM+0x3c>
		OLED_write_SRAM_char(str[i], row, col, font_size);
    16b2:	fe 01       	movw	r30, r28
    16b4:	e8 0f       	add	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	2a 2d       	mov	r18, r10
    16ba:	a8 01       	movw	r20, r16
    16bc:	b6 01       	movw	r22, r12
    16be:	80 81       	ld	r24, Z
    16c0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <OLED_write_SRAM_char>
    16c4:	0e 0d       	add	r16, r14
    16c6:	1f 1d       	adc	r17, r15
uint16_t OLED_pos_SRAM(uint16_t row, uint16_t col) {
	return (row*128 + col);
}

void OLED_print_SRAM(char* str, uint16_t row, uint16_t col, uint8_t font_size) {
	for(uint8_t i = 0; i < strlen(str); i++) {
    16c8:	b3 94       	inc	r11
    16ca:	8b 2d       	mov	r24, r11
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	fe 01       	movw	r30, r28
    16d0:	01 90       	ld	r0, Z+
    16d2:	00 20       	and	r0, r0
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <OLED_print_SRAM+0x42>
    16d6:	31 97       	sbiw	r30, 0x01	; 1
    16d8:	ec 1b       	sub	r30, r28
    16da:	fd 0b       	sbc	r31, r29
    16dc:	8e 17       	cp	r24, r30
    16de:	9f 07       	cpc	r25, r31
    16e0:	40 f3       	brcs	.-48     	; 0x16b2 <OLED_print_SRAM+0x24>
		OLED_write_SRAM_char(str[i], row, col, font_size);
		col+=font_size;
	}
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	08 95       	ret

000016f8 <OLED_clear_SRAM>:

void OLED_clear_SRAM(void) {
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
	for(unsigned int i = 0; i < 1024; i++) {
    16fc:	c0 e0       	ldi	r28, 0x00	; 0
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
		XMEM_write(0, i);
    1700:	be 01       	movw	r22, r28
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <XMEM_write>
		col+=font_size;
	}
}

void OLED_clear_SRAM(void) {
	for(unsigned int i = 0; i < 1024; i++) {
    170a:	21 96       	adiw	r28, 0x01	; 1
    170c:	c1 15       	cp	r28, r1
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	d8 07       	cpc	r29, r24
    1712:	b1 f7       	brne	.-20     	; 0x1700 <OLED_clear_SRAM+0x8>
		XMEM_write(0, i);
	}
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <OLED_set_pixel>:

 void OLED_set_pixel(int x, int y, int value){
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
	 int row_pixel = y % 8;
	 int row = y / 8;
	 int col = x;
	 char data = value << row_pixel;
    1722:	9b 01       	movw	r18, r22
    1724:	27 70       	andi	r18, 0x07	; 7
    1726:	30 78       	andi	r19, 0x80	; 128
    1728:	33 23       	and	r19, r19
    172a:	34 f4       	brge	.+12     	; 0x1738 <OLED_set_pixel+0x1e>
    172c:	21 50       	subi	r18, 0x01	; 1
    172e:	31 09       	sbc	r19, r1
    1730:	28 6f       	ori	r18, 0xF8	; 248
    1732:	3f 6f       	ori	r19, 0xFF	; 255
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	ea 01       	movw	r28, r20
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <OLED_set_pixel+0x26>
    173c:	cc 0f       	add	r28, r28
    173e:	dd 1f       	adc	r29, r29
    1740:	2a 95       	dec	r18
    1742:	e2 f7       	brpl	.-8      	; 0x173c <OLED_set_pixel+0x22>
	 int address = OLED_pos_SRAM(row,col);
    1744:	9b 01       	movw	r18, r22
    1746:	77 23       	and	r23, r23
    1748:	14 f4       	brge	.+4      	; 0x174e <OLED_set_pixel+0x34>
    174a:	29 5f       	subi	r18, 0xF9	; 249
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	35 95       	asr	r19
    1750:	27 95       	ror	r18
    1752:	35 95       	asr	r19
    1754:	27 95       	ror	r18
    1756:	35 95       	asr	r19
    1758:	27 95       	ror	r18
    175a:	36 95       	lsr	r19
    175c:	32 2f       	mov	r19, r18
    175e:	22 27       	eor	r18, r18
    1760:	37 95       	ror	r19
    1762:	27 95       	ror	r18
    1764:	89 01       	movw	r16, r18
    1766:	08 0f       	add	r16, r24
    1768:	19 1f       	adc	r17, r25
	 char retrieved_data = XMEM_read(address);
    176a:	c8 01       	movw	r24, r16
    176c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <XMEM_read>
	 retrieved_data &= ~(data);
	 data |= retrieved_data;
	 
	 XMEM_write(data, address);
    1770:	4c 2f       	mov	r20, r28
    1772:	40 95       	com	r20
    1774:	84 23       	and	r24, r20
    1776:	8c 2b       	or	r24, r28
    1778:	b8 01       	movw	r22, r16
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <XMEM_write>
 }
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <plotLineLow>:
 
 static void plotLineLow(int x0,int y0,int x1,int y1){
    178a:	6f 92       	push	r6
    178c:	7f 92       	push	r7
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
    17a8:	7b 01       	movw	r14, r22
    17aa:	4a 01       	movw	r8, r20
	 int dx = x1-x0;
    17ac:	ca 01       	movw	r24, r20
    17ae:	8c 1b       	sub	r24, r28
    17b0:	9d 0b       	sbc	r25, r29
	 int dy = y1-y0;
    17b2:	26 1b       	sub	r18, r22
    17b4:	37 0b       	sbc	r19, r23
	 int yi = 1;
	 if(dy<0){
    17b6:	3a f4       	brpl	.+14     	; 0x17c6 <plotLineLow+0x3c>
		 yi = -1;
		 dy = -dy;
    17b8:	31 95       	neg	r19
    17ba:	21 95       	neg	r18
    17bc:	31 09       	sbc	r19, r1
 static void plotLineLow(int x0,int y0,int x1,int y1){
	 int dx = x1-x0;
	 int dy = y1-y0;
	 int yi = 1;
	 if(dy<0){
		 yi = -1;
    17be:	aa 24       	eor	r10, r10
    17c0:	aa 94       	dec	r10
    17c2:	ba 2c       	mov	r11, r10
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <plotLineLow+0x42>
 }
 
 static void plotLineLow(int x0,int y0,int x1,int y1){
	 int dx = x1-x0;
	 int dy = y1-y0;
	 int yi = 1;
    17c6:	aa 24       	eor	r10, r10
    17c8:	a3 94       	inc	r10
    17ca:	b1 2c       	mov	r11, r1
	 if(dy<0){
		 yi = -1;
		 dy = -dy;
	 }
	 int D = (2*dy) - dx;
    17cc:	39 01       	movw	r6, r18
    17ce:	66 0c       	add	r6, r6
    17d0:	77 1c       	adc	r7, r7
    17d2:	83 01       	movw	r16, r6
    17d4:	08 1b       	sub	r16, r24
    17d6:	19 0b       	sbc	r17, r25
	 int y = y0;
	 
	 for(int x = x0;x<x1;x++){
    17d8:	c8 15       	cp	r28, r8
    17da:	d9 05       	cpc	r29, r9
    17dc:	cc f4       	brge	.+50     	; 0x1810 <plotLineLow+0x86>
		 OLED_set_pixel(x,y,1);
		 if(D>0){
			 y = y+yi;
			 D = D+ (2*(dy-dx));
    17de:	28 1b       	sub	r18, r24
    17e0:	39 0b       	sbc	r19, r25
    17e2:	69 01       	movw	r12, r18
    17e4:	cc 0c       	add	r12, r12
    17e6:	dd 1c       	adc	r13, r13
	 }
	 int D = (2*dy) - dx;
	 int y = y0;
	 
	 for(int x = x0;x<x1;x++){
		 OLED_set_pixel(x,y,1);
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	b7 01       	movw	r22, r14
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
		 if(D>0){
    17f4:	10 16       	cp	r1, r16
    17f6:	11 06       	cpc	r1, r17
    17f8:	2c f4       	brge	.+10     	; 0x1804 <plotLineLow+0x7a>
			 y = y+yi;
    17fa:	ea 0c       	add	r14, r10
    17fc:	fb 1c       	adc	r15, r11
			 D = D+ (2*(dy-dx));
    17fe:	0c 0d       	add	r16, r12
    1800:	1d 1d       	adc	r17, r13
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <plotLineLow+0x7e>
		 }
		 else{
			 D = D+2*dy;
    1804:	06 0d       	add	r16, r6
    1806:	17 1d       	adc	r17, r7
		 dy = -dy;
	 }
	 int D = (2*dy) - dx;
	 int y = y0;
	 
	 for(int x = x0;x<x1;x++){
    1808:	21 96       	adiw	r28, 0x01	; 1
    180a:	c8 15       	cp	r28, r8
    180c:	d9 05       	cpc	r29, r9
    180e:	64 f3       	brlt	.-40     	; 0x17e8 <plotLineLow+0x5e>
		 }
		 else{
			 D = D+2*dy;
		 }
	 }
 }
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	9f 90       	pop	r9
    1826:	8f 90       	pop	r8
    1828:	7f 90       	pop	r7
    182a:	6f 90       	pop	r6
    182c:	08 95       	ret

0000182e <plotLineHigh>:
 
 static void plotLineHigh(int x0,int y0,int x1,int y1){
    182e:	6f 92       	push	r6
    1830:	7f 92       	push	r7
    1832:	8f 92       	push	r8
    1834:	9f 92       	push	r9
    1836:	af 92       	push	r10
    1838:	bf 92       	push	r11
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	7c 01       	movw	r14, r24
    184c:	eb 01       	movw	r28, r22
    184e:	4a 01       	movw	r8, r20
	 int dx = x1-x0;
    1850:	6a 01       	movw	r12, r20
    1852:	c8 1a       	sub	r12, r24
    1854:	d9 0a       	sbc	r13, r25
	 int dy = y1-y0;
    1856:	26 1b       	sub	r18, r22
    1858:	37 0b       	sbc	r19, r23
	 int xi = 1;
	 if(dx<0){
    185a:	dd 20       	and	r13, r13
    185c:	3c f4       	brge	.+14     	; 0x186c <plotLineHigh+0x3e>
		 xi = -1;
		 dx = -dx;
    185e:	d1 94       	neg	r13
    1860:	c1 94       	neg	r12
    1862:	d1 08       	sbc	r13, r1
 static void plotLineHigh(int x0,int y0,int x1,int y1){
	 int dx = x1-x0;
	 int dy = y1-y0;
	 int xi = 1;
	 if(dx<0){
		 xi = -1;
    1864:	aa 24       	eor	r10, r10
    1866:	aa 94       	dec	r10
    1868:	ba 2c       	mov	r11, r10
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <plotLineHigh+0x44>
 }
 
 static void plotLineHigh(int x0,int y0,int x1,int y1){
	 int dx = x1-x0;
	 int dy = y1-y0;
	 int xi = 1;
    186c:	aa 24       	eor	r10, r10
    186e:	a3 94       	inc	r10
    1870:	b1 2c       	mov	r11, r1
	 if(dx<0){
		 xi = -1;
		 dx = -dx;
	 }
	 int D = (2*dx) - dy;
    1872:	36 01       	movw	r6, r12
    1874:	66 0c       	add	r6, r6
    1876:	77 1c       	adc	r7, r7
    1878:	83 01       	movw	r16, r6
    187a:	02 1b       	sub	r16, r18
    187c:	13 0b       	sbc	r17, r19
	 int x = x0;
	 
	 for(int y = y0;y<x1;y++){
    187e:	c8 15       	cp	r28, r8
    1880:	d9 05       	cpc	r29, r9
    1882:	c4 f4       	brge	.+48     	; 0x18b4 <plotLineHigh+0x86>
		 OLED_set_pixel(x,y,1);
		 if(D>0){
			 x = x+xi;
			 D = D+ (2*(dx-dy));
    1884:	c2 1a       	sub	r12, r18
    1886:	d3 0a       	sbc	r13, r19
    1888:	cc 0c       	add	r12, r12
    188a:	dd 1c       	adc	r13, r13
	 }
	 int D = (2*dx) - dy;
	 int x = x0;
	 
	 for(int y = y0;y<x1;y++){
		 OLED_set_pixel(x,y,1);
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	be 01       	movw	r22, r28
    1892:	c7 01       	movw	r24, r14
    1894:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
		 if(D>0){
    1898:	10 16       	cp	r1, r16
    189a:	11 06       	cpc	r1, r17
    189c:	2c f4       	brge	.+10     	; 0x18a8 <plotLineHigh+0x7a>
			 x = x+xi;
    189e:	ea 0c       	add	r14, r10
    18a0:	fb 1c       	adc	r15, r11
			 D = D+ (2*(dx-dy));
    18a2:	0c 0d       	add	r16, r12
    18a4:	1d 1d       	adc	r17, r13
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <plotLineHigh+0x7e>
		 }
		 else{
			 D = D+2*dx;
    18a8:	06 0d       	add	r16, r6
    18aa:	17 1d       	adc	r17, r7
		 dx = -dx;
	 }
	 int D = (2*dx) - dy;
	 int x = x0;
	 
	 for(int y = y0;y<x1;y++){
    18ac:	21 96       	adiw	r28, 0x01	; 1
    18ae:	c8 15       	cp	r28, r8
    18b0:	d9 05       	cpc	r29, r9
    18b2:	64 f3       	brlt	.-40     	; 0x188c <plotLineHigh+0x5e>
		 }
		 else{
			 D = D+2*dx;
		 }
	 }
 }
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	7f 90       	pop	r7
    18ce:	6f 90       	pop	r6
    18d0:	08 95       	ret

000018d2 <OLED_plotLine>:
 // using Bresenham's algorithm
 void OLED_plotLine(int x0,int y0, int x1, int y1){
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	fa 01       	movw	r30, r20
    18d8:	d9 01       	movw	r26, r18
	 if(abs(y1-y0) < abs(x1-x0)){
    18da:	26 1b       	sub	r18, r22
    18dc:	37 0b       	sbc	r19, r23
    18de:	a9 01       	movw	r20, r18
    18e0:	22 f4       	brpl	.+8      	; 0x18ea <OLED_plotLine+0x18>
    18e2:	44 27       	eor	r20, r20
    18e4:	55 27       	eor	r21, r21
    18e6:	42 1b       	sub	r20, r18
    18e8:	53 0b       	sbc	r21, r19
    18ea:	ef 01       	movw	r28, r30
    18ec:	c8 1b       	sub	r28, r24
    18ee:	d9 0b       	sbc	r29, r25
    18f0:	9e 01       	movw	r18, r28
    18f2:	22 f4       	brpl	.+8      	; 0x18fc <OLED_plotLine+0x2a>
    18f4:	22 27       	eor	r18, r18
    18f6:	33 27       	eor	r19, r19
    18f8:	2c 1b       	sub	r18, r28
    18fa:	3d 0b       	sbc	r19, r29
    18fc:	42 17       	cp	r20, r18
    18fe:	53 07       	cpc	r21, r19
    1900:	7c f4       	brge	.+30     	; 0x1920 <OLED_plotLine+0x4e>
		 if(x0>x1){
    1902:	e8 17       	cp	r30, r24
    1904:	f9 07       	cpc	r31, r25
    1906:	3c f4       	brge	.+14     	; 0x1916 <OLED_plotLine+0x44>
			 plotLineLow(x1,y1,x0,y0);
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	bd 01       	movw	r22, r26
    190e:	cf 01       	movw	r24, r30
    1910:	0e 94 c5 0b 	call	0x178a	; 0x178a <plotLineLow>
    1914:	13 c0       	rjmp	.+38     	; 0x193c <OLED_plotLine+0x6a>
		 }
		 else{
			 plotLineLow(x0,y0,x1,y1);
    1916:	9d 01       	movw	r18, r26
    1918:	af 01       	movw	r20, r30
    191a:	0e 94 c5 0b 	call	0x178a	; 0x178a <plotLineLow>
    191e:	0e c0       	rjmp	.+28     	; 0x193c <OLED_plotLine+0x6a>
		 }
	 }
	 else{
		 if(y0>y1){
    1920:	a6 17       	cp	r26, r22
    1922:	b7 07       	cpc	r27, r23
    1924:	3c f4       	brge	.+14     	; 0x1934 <OLED_plotLine+0x62>
			 plotLineHigh(x1,y1,x0,y0);
    1926:	9b 01       	movw	r18, r22
    1928:	ac 01       	movw	r20, r24
    192a:	bd 01       	movw	r22, r26
    192c:	cf 01       	movw	r24, r30
    192e:	0e 94 17 0c 	call	0x182e	; 0x182e <plotLineHigh>
    1932:	04 c0       	rjmp	.+8      	; 0x193c <OLED_plotLine+0x6a>
		 }
		 else{
			 plotLineHigh(x0,y0,x1,y1);
    1934:	9d 01       	movw	r18, r26
    1936:	af 01       	movw	r20, r30
    1938:	0e 94 17 0c 	call	0x182e	; 0x182e <plotLineHigh>
		 }
	 }
 }
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <OLED_draw_Racket>:
 
 void OLED_draw_Racket(int x, int y){
    1942:	2f 92       	push	r2
    1944:	3f 92       	push	r3
    1946:	4f 92       	push	r4
    1948:	5f 92       	push	r5
    194a:	6f 92       	push	r6
    194c:	7f 92       	push	r7
    194e:	8f 92       	push	r8
    1950:	9f 92       	push	r9
    1952:	af 92       	push	r10
    1954:	bf 92       	push	r11
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	8c 01       	movw	r16, r24
    1968:	eb 01       	movw	r28, r22
	 OLED_plotLine(x+9,y+0,x+11,y+0);
    196a:	6c 01       	movw	r12, r24
    196c:	8b e0       	ldi	r24, 0x0B	; 11
    196e:	c8 0e       	add	r12, r24
    1970:	d1 1c       	adc	r13, r1
    1972:	78 01       	movw	r14, r16
    1974:	89 e0       	ldi	r24, 0x09	; 9
    1976:	e8 0e       	add	r14, r24
    1978:	f1 1c       	adc	r15, r1
    197a:	9b 01       	movw	r18, r22
    197c:	a6 01       	movw	r20, r12
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+6,y+1,x+14,y+1);
    1984:	28 01       	movw	r4, r16
    1986:	8e e0       	ldi	r24, 0x0E	; 14
    1988:	48 0e       	add	r4, r24
    198a:	51 1c       	adc	r5, r1
    198c:	be 01       	movw	r22, r28
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	18 01       	movw	r2, r16
    1994:	86 e0       	ldi	r24, 0x06	; 6
    1996:	28 0e       	add	r2, r24
    1998:	31 1c       	adc	r3, r1
    199a:	9b 01       	movw	r18, r22
    199c:	a2 01       	movw	r20, r4
    199e:	c1 01       	movw	r24, r2
    19a0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+5,y+2,x+15,y+2);
    19a4:	48 01       	movw	r8, r16
    19a6:	8f e0       	ldi	r24, 0x0F	; 15
    19a8:	88 0e       	add	r8, r24
    19aa:	91 1c       	adc	r9, r1
    19ac:	be 01       	movw	r22, r28
    19ae:	6e 5f       	subi	r22, 0xFE	; 254
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	38 01       	movw	r6, r16
    19b4:	85 e0       	ldi	r24, 0x05	; 5
    19b6:	68 0e       	add	r6, r24
    19b8:	71 1c       	adc	r7, r1
    19ba:	9b 01       	movw	r18, r22
    19bc:	a4 01       	movw	r20, r8
    19be:	c3 01       	movw	r24, r6
    19c0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+4,y+3,x+16,y+3);
    19c4:	58 01       	movw	r10, r16
    19c6:	80 e1       	ldi	r24, 0x10	; 16
    19c8:	a8 0e       	add	r10, r24
    19ca:	b1 1c       	adc	r11, r1
    19cc:	be 01       	movw	r22, r28
    19ce:	6d 5f       	subi	r22, 0xFD	; 253
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	0c 5f       	subi	r16, 0xFC	; 252
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	9b 01       	movw	r18, r22
    19d8:	a5 01       	movw	r20, r10
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+4,y+4,x+16,y+4);
    19e0:	be 01       	movw	r22, r28
    19e2:	6c 5f       	subi	r22, 0xFC	; 252
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	9b 01       	movw	r18, r22
    19e8:	a5 01       	movw	r20, r10
    19ea:	c8 01       	movw	r24, r16
    19ec:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+4,y+5,x+16,y+5);
    19f0:	be 01       	movw	r22, r28
    19f2:	6b 5f       	subi	r22, 0xFB	; 251
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	9b 01       	movw	r18, r22
    19f8:	a5 01       	movw	r20, r10
    19fa:	c8 01       	movw	r24, r16
    19fc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+4,y+6,x+16,y+6);
    1a00:	be 01       	movw	r22, r28
    1a02:	6a 5f       	subi	r22, 0xFA	; 250
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	9b 01       	movw	r18, r22
    1a08:	a5 01       	movw	r20, r10
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+5,y+7,x+15,y+7);
    1a10:	be 01       	movw	r22, r28
    1a12:	69 5f       	subi	r22, 0xF9	; 249
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	9b 01       	movw	r18, r22
    1a18:	a4 01       	movw	r20, r8
    1a1a:	c3 01       	movw	r24, r6
    1a1c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+6,y+8,x+14,y+8);
    1a20:	be 01       	movw	r22, r28
    1a22:	68 5f       	subi	r22, 0xF8	; 248
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	9b 01       	movw	r18, r22
    1a28:	a2 01       	movw	r20, r4
    1a2a:	c1 01       	movw	r24, r2
    1a2c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+9,y+9,x+11,y+9);
    1a30:	be 01       	movw	r22, r28
    1a32:	67 5f       	subi	r22, 0xF7	; 247
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	9b 01       	movw	r18, r22
    1a38:	a6 01       	movw	r20, r12
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+9,y+10,x+11,y+10);
    1a40:	be 01       	movw	r22, r28
    1a42:	66 5f       	subi	r22, 0xF6	; 246
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	9b 01       	movw	r18, r22
    1a48:	a6 01       	movw	r20, r12
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+9,y+11,x+11,y+11);
    1a50:	be 01       	movw	r22, r28
    1a52:	65 5f       	subi	r22, 0xF5	; 245
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	9b 01       	movw	r18, r22
    1a58:	a6 01       	movw	r20, r12
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
	 OLED_plotLine(x+9,y+12,x+11,y+12);
    1a60:	be 01       	movw	r22, r28
    1a62:	64 5f       	subi	r22, 0xF4	; 244
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	9b 01       	movw	r18, r22
    1a68:	a6 01       	movw	r20, r12
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <OLED_plotLine>
 }
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	bf 90       	pop	r11
    1a82:	af 90       	pop	r10
    1a84:	9f 90       	pop	r9
    1a86:	8f 90       	pop	r8
    1a88:	7f 90       	pop	r7
    1a8a:	6f 90       	pop	r6
    1a8c:	5f 90       	pop	r5
    1a8e:	4f 90       	pop	r4
    1a90:	3f 90       	pop	r3
    1a92:	2f 90       	pop	r2
    1a94:	08 95       	ret

00001a96 <OLED_drawCircle>:

// using Bresenham's algorithm
void OLED_drawCircle(int xc, int yc, int x, int y)
{
    1a96:	6f 92       	push	r6
    1a98:	7f 92       	push	r7
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	8b 01       	movw	r16, r22
    1ab6:	7a 01       	movw	r14, r20
    1ab8:	69 01       	movw	r12, r18
	OLED_set_pixel(xc+x, yc+y, 1);
    1aba:	5b 01       	movw	r10, r22
    1abc:	a2 0e       	add	r10, r18
    1abe:	b3 1e       	adc	r11, r19
    1ac0:	4c 01       	movw	r8, r24
    1ac2:	84 0e       	add	r8, r20
    1ac4:	95 1e       	adc	r9, r21
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	b5 01       	movw	r22, r10
    1acc:	c4 01       	movw	r24, r8
    1ace:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc-x, yc+y, 1);
    1ad2:	3e 01       	movw	r6, r28
    1ad4:	6e 18       	sub	r6, r14
    1ad6:	7f 08       	sbc	r7, r15
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	b5 01       	movw	r22, r10
    1ade:	c3 01       	movw	r24, r6
    1ae0:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc+x, yc-y, 1);
    1ae4:	58 01       	movw	r10, r16
    1ae6:	ac 18       	sub	r10, r12
    1ae8:	bd 08       	sbc	r11, r13
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	b5 01       	movw	r22, r10
    1af0:	c4 01       	movw	r24, r8
    1af2:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc-x, yc-y, 1);
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	b5 01       	movw	r22, r10
    1afc:	c3 01       	movw	r24, r6
    1afe:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc+y, yc+x, 1);
    1b02:	58 01       	movw	r10, r16
    1b04:	ae 0c       	add	r10, r14
    1b06:	bf 1c       	adc	r11, r15
    1b08:	46 01       	movw	r8, r12
    1b0a:	8c 0e       	add	r8, r28
    1b0c:	9d 1e       	adc	r9, r29
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	b5 01       	movw	r22, r10
    1b14:	c4 01       	movw	r24, r8
    1b16:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc-y, yc+x, 1);
    1b1a:	cc 19       	sub	r28, r12
    1b1c:	dd 09       	sbc	r29, r13
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	b5 01       	movw	r22, r10
    1b24:	ce 01       	movw	r24, r28
    1b26:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc+y, yc-x, 1);
    1b2a:	0e 19       	sub	r16, r14
    1b2c:	1f 09       	sbc	r17, r15
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	b8 01       	movw	r22, r16
    1b34:	c4 01       	movw	r24, r8
    1b36:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
	OLED_set_pixel(xc-y, yc-x, 1);
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	b8 01       	movw	r22, r16
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_pixel>
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	ef 90       	pop	r14
    1b52:	df 90       	pop	r13
    1b54:	cf 90       	pop	r12
    1b56:	bf 90       	pop	r11
    1b58:	af 90       	pop	r10
    1b5a:	9f 90       	pop	r9
    1b5c:	8f 90       	pop	r8
    1b5e:	7f 90       	pop	r7
    1b60:	6f 90       	pop	r6
    1b62:	08 95       	ret

00001b64 <OLED_circleBres>:

// using Bresenham's algorithm
void OLED_circleBres(int xc, int yc, int r)
{
    1b64:	8f 92       	push	r8
    1b66:	9f 92       	push	r9
    1b68:	af 92       	push	r10
    1b6a:	bf 92       	push	r11
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	6c 01       	movw	r12, r24
    1b7e:	5b 01       	movw	r10, r22
    1b80:	8a 01       	movw	r16, r20
	int x = 0, y = r;
	int d = 3 - 2 * r;
    1b82:	9a 01       	movw	r18, r20
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	4c 01       	movw	r8, r24
    1b8e:	82 1a       	sub	r8, r18
    1b90:	93 0a       	sbc	r9, r19
	OLED_drawCircle(xc, yc, x, y);
    1b92:	9a 01       	movw	r18, r20
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	c6 01       	movw	r24, r12
    1b9a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <OLED_drawCircle>
	while (y >= x)
    1b9e:	11 23       	and	r17, r17
    1ba0:	6c f1       	brlt	.+90     	; 0x1bfc <OLED_circleBres+0x98>
    1ba2:	68 94       	set
    1ba4:	ee 24       	eor	r14, r14
    1ba6:	e2 f8       	bld	r14, 2
    1ba8:	f1 2c       	mov	r15, r1
    1baa:	c0 e0       	ldi	r28, 0x00	; 0
    1bac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		x++;
    1bae:	21 96       	adiw	r28, 0x01	; 1
		
		if (d > 0)
    1bb0:	18 14       	cp	r1, r8
    1bb2:	19 04       	cpc	r1, r9
    1bb4:	84 f4       	brge	.+32     	; 0x1bd6 <OLED_circleBres+0x72>
		{
			y--;
    1bb6:	01 50       	subi	r16, 0x01	; 1
    1bb8:	11 09       	sbc	r17, r1
			d = d + 4 * (x - y) + 10;
    1bba:	ce 01       	movw	r24, r28
    1bbc:	80 1b       	sub	r24, r16
    1bbe:	91 0b       	sbc	r25, r17
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	88 0d       	add	r24, r8
    1bca:	99 1d       	adc	r25, r9
    1bcc:	4c 01       	movw	r8, r24
    1bce:	2a e0       	ldi	r18, 0x0A	; 10
    1bd0:	82 0e       	add	r8, r18
    1bd2:	91 1c       	adc	r9, r1
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <OLED_circleBres+0x80>
		}
		else
		d = d + 4 * x + 6;
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	88 0d       	add	r24, r8
    1bda:	99 1d       	adc	r25, r9
    1bdc:	4c 01       	movw	r8, r24
    1bde:	26 e0       	ldi	r18, 0x06	; 6
    1be0:	82 0e       	add	r8, r18
    1be2:	91 1c       	adc	r9, r1
		OLED_drawCircle(xc, yc, x, y);
    1be4:	98 01       	movw	r18, r16
    1be6:	ae 01       	movw	r20, r28
    1be8:	b5 01       	movw	r22, r10
    1bea:	c6 01       	movw	r24, r12
    1bec:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <OLED_drawCircle>
    1bf0:	84 e0       	ldi	r24, 0x04	; 4
    1bf2:	e8 0e       	add	r14, r24
    1bf4:	f1 1c       	adc	r15, r1
void OLED_circleBres(int xc, int yc, int r)
{
	int x = 0, y = r;
	int d = 3 - 2 * r;
	OLED_drawCircle(xc, yc, x, y);
	while (y >= x)
    1bf6:	0c 17       	cp	r16, r28
    1bf8:	1d 07       	cpc	r17, r29
    1bfa:	cc f6       	brge	.-78     	; 0x1bae <OLED_circleBres+0x4a>
		}
		else
		d = d + 4 * x + 6;
		OLED_drawCircle(xc, yc, x, y);
	}
}
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	08 95       	ret

00001c16 <spi_master_init>:
#include "spi.h"

void spi_master_init(void) {
	DDRB |= (1 << DDB5)|(1 << DDB7);
    1c16:	87 b3       	in	r24, 0x17	; 23
    1c18:	80 6a       	ori	r24, 0xA0	; 160
    1c1a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
    1c1c:	81 e5       	ldi	r24, 0x51	; 81
    1c1e:	8d b9       	out	0x0d, r24	; 13
    1c20:	08 95       	ret

00001c22 <spi_master_transmit>:
}

void spi_master_transmit(uint8_t data) {
	SPDR = data;
    1c22:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
    1c24:	77 9b       	sbis	0x0e, 7	; 14
    1c26:	fe cf       	rjmp	.-4      	; 0x1c24 <spi_master_transmit+0x2>
}
    1c28:	08 95       	ret

00001c2a <spi_master_receive>:

uint8_t spi_master_receive(void) {
	uint8_t data = SPDR;
    1c2a:	8f b1       	in	r24, 0x0f	; 15
	return data;
    1c2c:	08 95       	ret

00001c2e <UART_init>:
#define FOSC 4915200
#define MYUBRR (FOSC/16/BAUD-1)

void UART_init(void) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(MYUBRR>>8);
    1c2e:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)MYUBRR;
    1c30:	8f e1       	ldi	r24, 0x1F	; 31
    1c32:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1c34:	88 e1       	ldi	r24, 0x18	; 24
    1c36:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1c38:	8e e8       	ldi	r24, 0x8E	; 142
    1c3a:	80 bd       	out	0x20, r24	; 32
    1c3c:	08 95       	ret

00001c3e <UART_Transmit>:
}

void UART_Transmit(unsigned char data) {
	while(!(UCSR0A & (1<<UDRE0)));
    1c3e:	5d 9b       	sbis	0x0b, 5	; 11
    1c40:	fe cf       	rjmp	.-4      	; 0x1c3e <UART_Transmit>
	UDR0 = data;
    1c42:	8c b9       	out	0x0c, r24	; 12
    1c44:	08 95       	ret

00001c46 <UART_Recieve>:
}

unsigned char UART_Recieve(void) {
	while(!(UCSR0A & (1<<RXC0)));
    1c46:	5f 9b       	sbis	0x0b, 7	; 11
    1c48:	fe cf       	rjmp	.-4      	; 0x1c46 <UART_Recieve>
	return UDR0;
    1c4a:	8c b1       	in	r24, 0x0c	; 12
    1c4c:	08 95       	ret

00001c4e <XMEM_init>:
#include <util/delay.h>

#define BASE_ADDRESS 0x1800

void XMEM_init(void) {
	MCUCR |= (1<<SRE);
    1c4e:	85 b7       	in	r24, 0x35	; 53
    1c50:	80 68       	ori	r24, 0x80	; 128
    1c52:	85 bf       	out	0x35, r24	; 53
	SFIOR &= ~(0b111<<XMM0);
    1c54:	80 b7       	in	r24, 0x30	; 48
    1c56:	87 7c       	andi	r24, 0xC7	; 199
    1c58:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
    1c5a:	80 b7       	in	r24, 0x30	; 48
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	80 bf       	out	0x30, r24	; 48
    1c60:	08 95       	ret

00001c62 <XMEM_write>:
}

void XMEM_write(uint8_t data, uint16_t address) {
	volatile char *ext_mem = (char * ) BASE_ADDRESS;
	ext_mem[address] = data;
    1c62:	fb 01       	movw	r30, r22
    1c64:	f8 5e       	subi	r31, 0xE8	; 232
    1c66:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c68:	00 00       	nop
    1c6a:	08 95       	ret

00001c6c <XMEM_read>:
	_delay_us(0.01);
}

uint8_t XMEM_read(uint16_t address) {
	volatile char *ext_mem = (char * ) BASE_ADDRESS;
	return ext_mem[address];
    1c6c:	98 5e       	subi	r25, 0xE8	; 232
    1c6e:	fc 01       	movw	r30, r24
    1c70:	80 81       	ld	r24, Z
}
    1c72:	08 95       	ret
    1c74:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    1c78:	60 f0       	brcs	.+24     	; 0x1c92 <XMEM_read+0x26>
    1c7a:	80 e8       	ldi	r24, 0x80	; 128
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <XMEM_read+0x16>
    1c80:	9e ef       	ldi	r25, 0xFE	; 254
    1c82:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    1c86:	28 f0       	brcs	.+10     	; 0x1c92 <XMEM_read+0x26>
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	51 e0       	ldi	r21, 0x01	; 1
    1c8c:	71 f4       	brne	.+28     	; 0x1caa <atan2+0x10>
    1c8e:	5e ef       	ldi	r21, 0xFE	; 254
    1c90:	0c c0       	rjmp	.+24     	; 0x1caa <atan2+0x10>
    1c92:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_nan>
    1c96:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_zero>

00001c9a <atan2>:
    1c9a:	e9 2f       	mov	r30, r25
    1c9c:	e0 78       	andi	r30, 0x80	; 128
    1c9e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    1ca2:	40 f3       	brcs	.-48     	; 0x1c74 <XMEM_read+0x8>
    1ca4:	09 2e       	mov	r0, r25
    1ca6:	05 2a       	or	r0, r21
    1ca8:	b1 f3       	breq	.-20     	; 0x1c96 <XMEM_read+0x2a>
    1caa:	26 17       	cp	r18, r22
    1cac:	37 07       	cpc	r19, r23
    1cae:	48 07       	cpc	r20, r24
    1cb0:	59 07       	cpc	r21, r25
    1cb2:	38 f0       	brcs	.+14     	; 0x1cc2 <atan2+0x28>
    1cb4:	0e 2e       	mov	r0, r30
    1cb6:	07 f8       	bld	r0, 7
    1cb8:	e0 25       	eor	r30, r0
    1cba:	69 f0       	breq	.+26     	; 0x1cd6 <atan2+0x3c>
    1cbc:	e0 25       	eor	r30, r0
    1cbe:	e0 64       	ori	r30, 0x40	; 64
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <atan2+0x3c>
    1cc2:	ef 63       	ori	r30, 0x3F	; 63
    1cc4:	07 f8       	bld	r0, 7
    1cc6:	00 94       	com	r0
    1cc8:	07 fa       	bst	r0, 7
    1cca:	db 01       	movw	r26, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	9d 01       	movw	r18, r26
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	ad 01       	movw	r20, r26
    1cd6:	ef 93       	push	r30
    1cd8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__divsf3_pse>
    1cdc:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_round>
    1ce0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <atan>
    1ce4:	5f 91       	pop	r21
    1ce6:	55 23       	and	r21, r21
    1ce8:	39 f0       	breq	.+14     	; 0x1cf8 <atan2+0x5e>
    1cea:	2b ed       	ldi	r18, 0xDB	; 219
    1cec:	3f e0       	ldi	r19, 0x0F	; 15
    1cee:	49 e4       	ldi	r20, 0x49	; 73
    1cf0:	50 fd       	sbrc	r21, 0
    1cf2:	49 ec       	ldi	r20, 0xC9	; 201
    1cf4:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__addsf3>
    1cf8:	08 95       	ret

00001cfa <atan>:
    1cfa:	df 93       	push	r29
    1cfc:	dd 27       	eor	r29, r29
    1cfe:	b9 2f       	mov	r27, r25
    1d00:	bf 77       	andi	r27, 0x7F	; 127
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	16 16       	cp	r1, r22
    1d08:	17 06       	cpc	r1, r23
    1d0a:	48 07       	cpc	r20, r24
    1d0c:	5b 07       	cpc	r21, r27
    1d0e:	18 f4       	brcc	.+6      	; 0x1d16 <atan+0x1c>
    1d10:	d9 2f       	mov	r29, r25
    1d12:	0e 94 01 10 	call	0x2002	; 0x2002 <inverse>
    1d16:	9f 93       	push	r25
    1d18:	8f 93       	push	r24
    1d1a:	7f 93       	push	r23
    1d1c:	6f 93       	push	r22
    1d1e:	0e 94 76 10 	call	0x20ec	; 0x20ec <square>
    1d22:	e0 e7       	ldi	r30, 0x70	; 112
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__fp_powser>
    1d2a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__fp_round>
    1d2e:	2f 91       	pop	r18
    1d30:	3f 91       	pop	r19
    1d32:	4f 91       	pop	r20
    1d34:	5f 91       	pop	r21
    1d36:	0e 94 1c 10 	call	0x2038	; 0x2038 <__mulsf3x>
    1d3a:	dd 23       	and	r29, r29
    1d3c:	51 f0       	breq	.+20     	; 0x1d52 <atan+0x58>
    1d3e:	90 58       	subi	r25, 0x80	; 128
    1d40:	a2 ea       	ldi	r26, 0xA2	; 162
    1d42:	2a ed       	ldi	r18, 0xDA	; 218
    1d44:	3f e0       	ldi	r19, 0x0F	; 15
    1d46:	49 ec       	ldi	r20, 0xC9	; 201
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	d0 78       	andi	r29, 0x80	; 128
    1d4c:	5d 27       	eor	r21, r29
    1d4e:	0e 94 92 10 	call	0x2124	; 0x2124 <__addsf3x>
    1d52:	df 91       	pop	r29
    1d54:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>

00001d58 <__cmpsf2>:
    1d58:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fp_cmp>
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <__cmpsf2+0x8>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	08 95       	ret

00001d62 <__divsf3>:
    1d62:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__divsf3x>
    1d66:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    1d6a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    1d6e:	58 f0       	brcs	.+22     	; 0x1d86 <__divsf3+0x24>
    1d70:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    1d74:	40 f0       	brcs	.+16     	; 0x1d86 <__divsf3+0x24>
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <__divsf3+0x20>
    1d78:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <__divsf3+0x24>
    1d7c:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    1d80:	51 11       	cpse	r21, r1
    1d82:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    1d86:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_nan>

00001d8a <__divsf3x>:
    1d8a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    1d8e:	68 f3       	brcs	.-38     	; 0x1d6a <__divsf3+0x8>

00001d90 <__divsf3_pse>:
    1d90:	99 23       	and	r25, r25
    1d92:	b1 f3       	breq	.-20     	; 0x1d80 <__divsf3+0x1e>
    1d94:	55 23       	and	r21, r21
    1d96:	91 f3       	breq	.-28     	; 0x1d7c <__divsf3+0x1a>
    1d98:	95 1b       	sub	r25, r21
    1d9a:	55 0b       	sbc	r21, r21
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	aa 27       	eor	r26, r26
    1da0:	62 17       	cp	r22, r18
    1da2:	73 07       	cpc	r23, r19
    1da4:	84 07       	cpc	r24, r20
    1da6:	38 f0       	brcs	.+14     	; 0x1db6 <__divsf3_pse+0x26>
    1da8:	9f 5f       	subi	r25, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	44 1f       	adc	r20, r20
    1db2:	aa 1f       	adc	r26, r26
    1db4:	a9 f3       	breq	.-22     	; 0x1da0 <__divsf3_pse+0x10>
    1db6:	35 d0       	rcall	.+106    	; 0x1e22 <__divsf3_pse+0x92>
    1db8:	0e 2e       	mov	r0, r30
    1dba:	3a f0       	brmi	.+14     	; 0x1dca <__divsf3_pse+0x3a>
    1dbc:	e0 e8       	ldi	r30, 0x80	; 128
    1dbe:	32 d0       	rcall	.+100    	; 0x1e24 <__divsf3_pse+0x94>
    1dc0:	91 50       	subi	r25, 0x01	; 1
    1dc2:	50 40       	sbci	r21, 0x00	; 0
    1dc4:	e6 95       	lsr	r30
    1dc6:	00 1c       	adc	r0, r0
    1dc8:	ca f7       	brpl	.-14     	; 0x1dbc <__divsf3_pse+0x2c>
    1dca:	2b d0       	rcall	.+86     	; 0x1e22 <__divsf3_pse+0x92>
    1dcc:	fe 2f       	mov	r31, r30
    1dce:	29 d0       	rcall	.+82     	; 0x1e22 <__divsf3_pse+0x92>
    1dd0:	66 0f       	add	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	26 17       	cp	r18, r22
    1dda:	37 07       	cpc	r19, r23
    1ddc:	48 07       	cpc	r20, r24
    1dde:	ab 07       	cpc	r26, r27
    1de0:	b0 e8       	ldi	r27, 0x80	; 128
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <__divsf3_pse+0x56>
    1de4:	bb 0b       	sbc	r27, r27
    1de6:	80 2d       	mov	r24, r0
    1de8:	bf 01       	movw	r22, r30
    1dea:	ff 27       	eor	r31, r31
    1dec:	93 58       	subi	r25, 0x83	; 131
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	3a f0       	brmi	.+14     	; 0x1e00 <__divsf3_pse+0x70>
    1df2:	9e 3f       	cpi	r25, 0xFE	; 254
    1df4:	51 05       	cpc	r21, r1
    1df6:	78 f0       	brcs	.+30     	; 0x1e16 <__divsf3_pse+0x86>
    1df8:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    1dfc:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    1e00:	5f 3f       	cpi	r21, 0xFF	; 255
    1e02:	e4 f3       	brlt	.-8      	; 0x1dfc <__divsf3_pse+0x6c>
    1e04:	98 3e       	cpi	r25, 0xE8	; 232
    1e06:	d4 f3       	brlt	.-12     	; 0x1dfc <__divsf3_pse+0x6c>
    1e08:	86 95       	lsr	r24
    1e0a:	77 95       	ror	r23
    1e0c:	67 95       	ror	r22
    1e0e:	b7 95       	ror	r27
    1e10:	f7 95       	ror	r31
    1e12:	9f 5f       	subi	r25, 0xFF	; 255
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__divsf3_pse+0x78>
    1e16:	88 0f       	add	r24, r24
    1e18:	91 1d       	adc	r25, r1
    1e1a:	96 95       	lsr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	97 f9       	bld	r25, 7
    1e20:	08 95       	ret
    1e22:	e1 e0       	ldi	r30, 0x01	; 1
    1e24:	66 0f       	add	r22, r22
    1e26:	77 1f       	adc	r23, r23
    1e28:	88 1f       	adc	r24, r24
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	62 17       	cp	r22, r18
    1e2e:	73 07       	cpc	r23, r19
    1e30:	84 07       	cpc	r24, r20
    1e32:	ba 07       	cpc	r27, r26
    1e34:	20 f0       	brcs	.+8      	; 0x1e3e <__divsf3_pse+0xae>
    1e36:	62 1b       	sub	r22, r18
    1e38:	73 0b       	sbc	r23, r19
    1e3a:	84 0b       	sbc	r24, r20
    1e3c:	ba 0b       	sbc	r27, r26
    1e3e:	ee 1f       	adc	r30, r30
    1e40:	88 f7       	brcc	.-30     	; 0x1e24 <__divsf3_pse+0x94>
    1e42:	e0 95       	com	r30
    1e44:	08 95       	ret

00001e46 <__floatunsisf>:
    1e46:	e8 94       	clt
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <__floatsisf+0x12>

00001e4a <__floatsisf>:
    1e4a:	97 fb       	bst	r25, 7
    1e4c:	3e f4       	brtc	.+14     	; 0x1e5c <__floatsisf+0x12>
    1e4e:	90 95       	com	r25
    1e50:	80 95       	com	r24
    1e52:	70 95       	com	r23
    1e54:	61 95       	neg	r22
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	99 23       	and	r25, r25
    1e5e:	a9 f0       	breq	.+42     	; 0x1e8a <__floatsisf+0x40>
    1e60:	f9 2f       	mov	r31, r25
    1e62:	96 e9       	ldi	r25, 0x96	; 150
    1e64:	bb 27       	eor	r27, r27
    1e66:	93 95       	inc	r25
    1e68:	f6 95       	lsr	r31
    1e6a:	87 95       	ror	r24
    1e6c:	77 95       	ror	r23
    1e6e:	67 95       	ror	r22
    1e70:	b7 95       	ror	r27
    1e72:	f1 11       	cpse	r31, r1
    1e74:	f8 cf       	rjmp	.-16     	; 0x1e66 <__floatsisf+0x1c>
    1e76:	fa f4       	brpl	.+62     	; 0x1eb6 <__floatsisf+0x6c>
    1e78:	bb 0f       	add	r27, r27
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <__floatsisf+0x36>
    1e7c:	60 ff       	sbrs	r22, 0
    1e7e:	1b c0       	rjmp	.+54     	; 0x1eb6 <__floatsisf+0x6c>
    1e80:	6f 5f       	subi	r22, 0xFF	; 255
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	8f 4f       	sbci	r24, 0xFF	; 255
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	16 c0       	rjmp	.+44     	; 0x1eb6 <__floatsisf+0x6c>
    1e8a:	88 23       	and	r24, r24
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <__floatsisf+0x48>
    1e8e:	96 e9       	ldi	r25, 0x96	; 150
    1e90:	11 c0       	rjmp	.+34     	; 0x1eb4 <__floatsisf+0x6a>
    1e92:	77 23       	and	r23, r23
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <__floatsisf+0x54>
    1e96:	9e e8       	ldi	r25, 0x8E	; 142
    1e98:	87 2f       	mov	r24, r23
    1e9a:	76 2f       	mov	r23, r22
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <__floatsisf+0x5e>
    1e9e:	66 23       	and	r22, r22
    1ea0:	71 f0       	breq	.+28     	; 0x1ebe <__floatsisf+0x74>
    1ea2:	96 e8       	ldi	r25, 0x86	; 134
    1ea4:	86 2f       	mov	r24, r22
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	2a f0       	brmi	.+10     	; 0x1eb6 <__floatsisf+0x6c>
    1eac:	9a 95       	dec	r25
    1eae:	66 0f       	add	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	da f7       	brpl	.-10     	; 0x1eac <__floatsisf+0x62>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret

00001ec0 <__fp_cmp>:
    1ec0:	99 0f       	add	r25, r25
    1ec2:	00 08       	sbc	r0, r0
    1ec4:	55 0f       	add	r21, r21
    1ec6:	aa 0b       	sbc	r26, r26
    1ec8:	e0 e8       	ldi	r30, 0x80	; 128
    1eca:	fe ef       	ldi	r31, 0xFE	; 254
    1ecc:	16 16       	cp	r1, r22
    1ece:	17 06       	cpc	r1, r23
    1ed0:	e8 07       	cpc	r30, r24
    1ed2:	f9 07       	cpc	r31, r25
    1ed4:	c0 f0       	brcs	.+48     	; 0x1f06 <__fp_cmp+0x46>
    1ed6:	12 16       	cp	r1, r18
    1ed8:	13 06       	cpc	r1, r19
    1eda:	e4 07       	cpc	r30, r20
    1edc:	f5 07       	cpc	r31, r21
    1ede:	98 f0       	brcs	.+38     	; 0x1f06 <__fp_cmp+0x46>
    1ee0:	62 1b       	sub	r22, r18
    1ee2:	73 0b       	sbc	r23, r19
    1ee4:	84 0b       	sbc	r24, r20
    1ee6:	95 0b       	sbc	r25, r21
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <__fp_cmp+0x38>
    1eea:	0a 26       	eor	r0, r26
    1eec:	61 f0       	breq	.+24     	; 0x1f06 <__fp_cmp+0x46>
    1eee:	23 2b       	or	r18, r19
    1ef0:	24 2b       	or	r18, r20
    1ef2:	25 2b       	or	r18, r21
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <__fp_cmp+0x3e>
    1ef6:	08 95       	ret
    1ef8:	0a 26       	eor	r0, r26
    1efa:	09 f4       	brne	.+2      	; 0x1efe <__fp_cmp+0x3e>
    1efc:	a1 40       	sbci	r26, 0x01	; 1
    1efe:	a6 95       	lsr	r26
    1f00:	8f ef       	ldi	r24, 0xFF	; 255
    1f02:	81 1d       	adc	r24, r1
    1f04:	81 1d       	adc	r24, r1
    1f06:	08 95       	ret

00001f08 <__fp_inf>:
    1f08:	97 f9       	bld	r25, 7
    1f0a:	9f 67       	ori	r25, 0x7F	; 127
    1f0c:	80 e8       	ldi	r24, 0x80	; 128
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	08 95       	ret

00001f14 <__fp_nan>:
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	80 ec       	ldi	r24, 0xC0	; 192
    1f18:	08 95       	ret

00001f1a <__fp_powser>:
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	1f 93       	push	r17
    1f20:	0f 93       	push	r16
    1f22:	ff 92       	push	r15
    1f24:	ef 92       	push	r14
    1f26:	df 92       	push	r13
    1f28:	7b 01       	movw	r14, r22
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	68 94       	set
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <__fp_powser+0x22>
    1f30:	da 2e       	mov	r13, r26
    1f32:	ef 01       	movw	r28, r30
    1f34:	0e 94 1c 10 	call	0x2038	; 0x2038 <__mulsf3x>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e8 94       	clt
    1f3c:	a5 91       	lpm	r26, Z+
    1f3e:	25 91       	lpm	r18, Z+
    1f40:	35 91       	lpm	r19, Z+
    1f42:	45 91       	lpm	r20, Z+
    1f44:	55 91       	lpm	r21, Z+
    1f46:	a6 f3       	brts	.-24     	; 0x1f30 <__fp_powser+0x16>
    1f48:	ef 01       	movw	r28, r30
    1f4a:	0e 94 92 10 	call	0x2124	; 0x2124 <__addsf3x>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	97 01       	movw	r18, r14
    1f52:	a8 01       	movw	r20, r16
    1f54:	da 94       	dec	r13
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <__fp_powser+0x18>
    1f58:	df 90       	pop	r13
    1f5a:	ef 90       	pop	r14
    1f5c:	ff 90       	pop	r15
    1f5e:	0f 91       	pop	r16
    1f60:	1f 91       	pop	r17
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <__fp_pscA>:
    1f68:	00 24       	eor	r0, r0
    1f6a:	0a 94       	dec	r0
    1f6c:	16 16       	cp	r1, r22
    1f6e:	17 06       	cpc	r1, r23
    1f70:	18 06       	cpc	r1, r24
    1f72:	09 06       	cpc	r0, r25
    1f74:	08 95       	ret

00001f76 <__fp_pscB>:
    1f76:	00 24       	eor	r0, r0
    1f78:	0a 94       	dec	r0
    1f7a:	12 16       	cp	r1, r18
    1f7c:	13 06       	cpc	r1, r19
    1f7e:	14 06       	cpc	r1, r20
    1f80:	05 06       	cpc	r0, r21
    1f82:	08 95       	ret

00001f84 <__fp_round>:
    1f84:	09 2e       	mov	r0, r25
    1f86:	03 94       	inc	r0
    1f88:	00 0c       	add	r0, r0
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <__fp_round+0xc>
    1f8c:	88 23       	and	r24, r24
    1f8e:	52 f0       	brmi	.+20     	; 0x1fa4 <__fp_round+0x20>
    1f90:	bb 0f       	add	r27, r27
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <__fp_round+0x20>
    1f94:	bf 2b       	or	r27, r31
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <__fp_round+0x18>
    1f98:	60 ff       	sbrs	r22, 0
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <__fp_round+0x20>
    1f9c:	6f 5f       	subi	r22, 0xFF	; 255
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__fp_split3>:
    1fa6:	57 fd       	sbrc	r21, 7
    1fa8:	90 58       	subi	r25, 0x80	; 128
    1faa:	44 0f       	add	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <__fp_splitA+0x10>
    1fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb2:	71 f0       	breq	.+28     	; 0x1fd0 <__fp_splitA+0x1a>
    1fb4:	47 95       	ror	r20

00001fb6 <__fp_splitA>:
    1fb6:	88 0f       	add	r24, r24
    1fb8:	97 fb       	bst	r25, 7
    1fba:	99 1f       	adc	r25, r25
    1fbc:	61 f0       	breq	.+24     	; 0x1fd6 <__fp_splitA+0x20>
    1fbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc0:	79 f0       	breq	.+30     	; 0x1fe0 <__fp_splitA+0x2a>
    1fc2:	87 95       	ror	r24
    1fc4:	08 95       	ret
    1fc6:	12 16       	cp	r1, r18
    1fc8:	13 06       	cpc	r1, r19
    1fca:	14 06       	cpc	r1, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	f2 cf       	rjmp	.-28     	; 0x1fb4 <__fp_split3+0xe>
    1fd0:	46 95       	lsr	r20
    1fd2:	f1 df       	rcall	.-30     	; 0x1fb6 <__fp_splitA>
    1fd4:	08 c0       	rjmp	.+16     	; 0x1fe6 <__fp_splitA+0x30>
    1fd6:	16 16       	cp	r1, r22
    1fd8:	17 06       	cpc	r1, r23
    1fda:	18 06       	cpc	r1, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	f1 cf       	rjmp	.-30     	; 0x1fc2 <__fp_splitA+0xc>
    1fe0:	86 95       	lsr	r24
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	61 05       	cpc	r22, r1
    1fe6:	08 94       	sec
    1fe8:	08 95       	ret

00001fea <__fp_zero>:
    1fea:	e8 94       	clt

00001fec <__fp_szero>:
    1fec:	bb 27       	eor	r27, r27
    1fee:	66 27       	eor	r22, r22
    1ff0:	77 27       	eor	r23, r23
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	97 f9       	bld	r25, 7
    1ff6:	08 95       	ret

00001ff8 <__gesf2>:
    1ff8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fp_cmp>
    1ffc:	08 f4       	brcc	.+2      	; 0x2000 <__gesf2+0x8>
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
    2000:	08 95       	ret

00002002 <inverse>:
    2002:	9b 01       	movw	r18, r22
    2004:	ac 01       	movw	r20, r24
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	80 e8       	ldi	r24, 0x80	; 128
    200c:	9f e3       	ldi	r25, 0x3F	; 63
    200e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__divsf3>

00002012 <__mulsf3>:
    2012:	0e 94 1c 10 	call	0x2038	; 0x2038 <__mulsf3x>
    2016:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    201a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    201e:	38 f0       	brcs	.+14     	; 0x202e <__mulsf3+0x1c>
    2020:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    2024:	20 f0       	brcs	.+8      	; 0x202e <__mulsf3+0x1c>
    2026:	95 23       	and	r25, r21
    2028:	11 f0       	breq	.+4      	; 0x202e <__mulsf3+0x1c>
    202a:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    202e:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_nan>
    2032:	11 24       	eor	r1, r1
    2034:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>

00002038 <__mulsf3x>:
    2038:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    203c:	70 f3       	brcs	.-36     	; 0x201a <__mulsf3+0x8>

0000203e <__mulsf3_pse>:
    203e:	95 9f       	mul	r25, r21
    2040:	c1 f3       	breq	.-16     	; 0x2032 <__mulsf3+0x20>
    2042:	95 0f       	add	r25, r21
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	55 1f       	adc	r21, r21
    2048:	62 9f       	mul	r22, r18
    204a:	f0 01       	movw	r30, r0
    204c:	72 9f       	mul	r23, r18
    204e:	bb 27       	eor	r27, r27
    2050:	f0 0d       	add	r31, r0
    2052:	b1 1d       	adc	r27, r1
    2054:	63 9f       	mul	r22, r19
    2056:	aa 27       	eor	r26, r26
    2058:	f0 0d       	add	r31, r0
    205a:	b1 1d       	adc	r27, r1
    205c:	aa 1f       	adc	r26, r26
    205e:	64 9f       	mul	r22, r20
    2060:	66 27       	eor	r22, r22
    2062:	b0 0d       	add	r27, r0
    2064:	a1 1d       	adc	r26, r1
    2066:	66 1f       	adc	r22, r22
    2068:	82 9f       	mul	r24, r18
    206a:	22 27       	eor	r18, r18
    206c:	b0 0d       	add	r27, r0
    206e:	a1 1d       	adc	r26, r1
    2070:	62 1f       	adc	r22, r18
    2072:	73 9f       	mul	r23, r19
    2074:	b0 0d       	add	r27, r0
    2076:	a1 1d       	adc	r26, r1
    2078:	62 1f       	adc	r22, r18
    207a:	83 9f       	mul	r24, r19
    207c:	a0 0d       	add	r26, r0
    207e:	61 1d       	adc	r22, r1
    2080:	22 1f       	adc	r18, r18
    2082:	74 9f       	mul	r23, r20
    2084:	33 27       	eor	r19, r19
    2086:	a0 0d       	add	r26, r0
    2088:	61 1d       	adc	r22, r1
    208a:	23 1f       	adc	r18, r19
    208c:	84 9f       	mul	r24, r20
    208e:	60 0d       	add	r22, r0
    2090:	21 1d       	adc	r18, r1
    2092:	82 2f       	mov	r24, r18
    2094:	76 2f       	mov	r23, r22
    2096:	6a 2f       	mov	r22, r26
    2098:	11 24       	eor	r1, r1
    209a:	9f 57       	subi	r25, 0x7F	; 127
    209c:	50 40       	sbci	r21, 0x00	; 0
    209e:	9a f0       	brmi	.+38     	; 0x20c6 <__mulsf3_pse+0x88>
    20a0:	f1 f0       	breq	.+60     	; 0x20de <__mulsf3_pse+0xa0>
    20a2:	88 23       	and	r24, r24
    20a4:	4a f0       	brmi	.+18     	; 0x20b8 <__mulsf3_pse+0x7a>
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	bb 1f       	adc	r27, r27
    20ac:	66 1f       	adc	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	91 50       	subi	r25, 0x01	; 1
    20b4:	50 40       	sbci	r21, 0x00	; 0
    20b6:	a9 f7       	brne	.-22     	; 0x20a2 <__mulsf3_pse+0x64>
    20b8:	9e 3f       	cpi	r25, 0xFE	; 254
    20ba:	51 05       	cpc	r21, r1
    20bc:	80 f0       	brcs	.+32     	; 0x20de <__mulsf3_pse+0xa0>
    20be:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    20c2:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    20c6:	5f 3f       	cpi	r21, 0xFF	; 255
    20c8:	e4 f3       	brlt	.-8      	; 0x20c2 <__mulsf3_pse+0x84>
    20ca:	98 3e       	cpi	r25, 0xE8	; 232
    20cc:	d4 f3       	brlt	.-12     	; 0x20c2 <__mulsf3_pse+0x84>
    20ce:	86 95       	lsr	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	b7 95       	ror	r27
    20d6:	f7 95       	ror	r31
    20d8:	e7 95       	ror	r30
    20da:	9f 5f       	subi	r25, 0xFF	; 255
    20dc:	c1 f7       	brne	.-16     	; 0x20ce <__mulsf3_pse+0x90>
    20de:	fe 2b       	or	r31, r30
    20e0:	88 0f       	add	r24, r24
    20e2:	91 1d       	adc	r25, r1
    20e4:	96 95       	lsr	r25
    20e6:	87 95       	ror	r24
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret

000020ec <square>:
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__mulsf3>

000020f4 <__subsf3>:
    20f4:	50 58       	subi	r21, 0x80	; 128

000020f6 <__addsf3>:
    20f6:	bb 27       	eor	r27, r27
    20f8:	aa 27       	eor	r26, r26
    20fa:	0e 94 92 10 	call	0x2124	; 0x2124 <__addsf3x>
    20fe:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    2102:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    2106:	38 f0       	brcs	.+14     	; 0x2116 <__addsf3+0x20>
    2108:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    210c:	20 f0       	brcs	.+8      	; 0x2116 <__addsf3+0x20>
    210e:	39 f4       	brne	.+14     	; 0x211e <__addsf3+0x28>
    2110:	9f 3f       	cpi	r25, 0xFF	; 255
    2112:	19 f4       	brne	.+6      	; 0x211a <__addsf3+0x24>
    2114:	26 f4       	brtc	.+8      	; 0x211e <__addsf3+0x28>
    2116:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_nan>
    211a:	0e f4       	brtc	.+2      	; 0x211e <__addsf3+0x28>
    211c:	e0 95       	com	r30
    211e:	e7 fb       	bst	r30, 7
    2120:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>

00002124 <__addsf3x>:
    2124:	e9 2f       	mov	r30, r25
    2126:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    212a:	58 f3       	brcs	.-42     	; 0x2102 <__addsf3+0xc>
    212c:	ba 17       	cp	r27, r26
    212e:	62 07       	cpc	r22, r18
    2130:	73 07       	cpc	r23, r19
    2132:	84 07       	cpc	r24, r20
    2134:	95 07       	cpc	r25, r21
    2136:	20 f0       	brcs	.+8      	; 0x2140 <__addsf3x+0x1c>
    2138:	79 f4       	brne	.+30     	; 0x2158 <__addsf3x+0x34>
    213a:	a6 f5       	brtc	.+104    	; 0x21a4 <__addsf3x+0x80>
    213c:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_zero>
    2140:	0e f4       	brtc	.+2      	; 0x2144 <__addsf3x+0x20>
    2142:	e0 95       	com	r30
    2144:	0b 2e       	mov	r0, r27
    2146:	ba 2f       	mov	r27, r26
    2148:	a0 2d       	mov	r26, r0
    214a:	0b 01       	movw	r0, r22
    214c:	b9 01       	movw	r22, r18
    214e:	90 01       	movw	r18, r0
    2150:	0c 01       	movw	r0, r24
    2152:	ca 01       	movw	r24, r20
    2154:	a0 01       	movw	r20, r0
    2156:	11 24       	eor	r1, r1
    2158:	ff 27       	eor	r31, r31
    215a:	59 1b       	sub	r21, r25
    215c:	99 f0       	breq	.+38     	; 0x2184 <__addsf3x+0x60>
    215e:	59 3f       	cpi	r21, 0xF9	; 249
    2160:	50 f4       	brcc	.+20     	; 0x2176 <__addsf3x+0x52>
    2162:	50 3e       	cpi	r21, 0xE0	; 224
    2164:	68 f1       	brcs	.+90     	; 0x21c0 <__addsf3x+0x9c>
    2166:	1a 16       	cp	r1, r26
    2168:	f0 40       	sbci	r31, 0x00	; 0
    216a:	a2 2f       	mov	r26, r18
    216c:	23 2f       	mov	r18, r19
    216e:	34 2f       	mov	r19, r20
    2170:	44 27       	eor	r20, r20
    2172:	58 5f       	subi	r21, 0xF8	; 248
    2174:	f3 cf       	rjmp	.-26     	; 0x215c <__addsf3x+0x38>
    2176:	46 95       	lsr	r20
    2178:	37 95       	ror	r19
    217a:	27 95       	ror	r18
    217c:	a7 95       	ror	r26
    217e:	f0 40       	sbci	r31, 0x00	; 0
    2180:	53 95       	inc	r21
    2182:	c9 f7       	brne	.-14     	; 0x2176 <__addsf3x+0x52>
    2184:	7e f4       	brtc	.+30     	; 0x21a4 <__addsf3x+0x80>
    2186:	1f 16       	cp	r1, r31
    2188:	ba 0b       	sbc	r27, r26
    218a:	62 0b       	sbc	r22, r18
    218c:	73 0b       	sbc	r23, r19
    218e:	84 0b       	sbc	r24, r20
    2190:	ba f0       	brmi	.+46     	; 0x21c0 <__addsf3x+0x9c>
    2192:	91 50       	subi	r25, 0x01	; 1
    2194:	a1 f0       	breq	.+40     	; 0x21be <__addsf3x+0x9a>
    2196:	ff 0f       	add	r31, r31
    2198:	bb 1f       	adc	r27, r27
    219a:	66 1f       	adc	r22, r22
    219c:	77 1f       	adc	r23, r23
    219e:	88 1f       	adc	r24, r24
    21a0:	c2 f7       	brpl	.-16     	; 0x2192 <__addsf3x+0x6e>
    21a2:	0e c0       	rjmp	.+28     	; 0x21c0 <__addsf3x+0x9c>
    21a4:	ba 0f       	add	r27, r26
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 1f       	adc	r23, r19
    21aa:	84 1f       	adc	r24, r20
    21ac:	48 f4       	brcc	.+18     	; 0x21c0 <__addsf3x+0x9c>
    21ae:	87 95       	ror	r24
    21b0:	77 95       	ror	r23
    21b2:	67 95       	ror	r22
    21b4:	b7 95       	ror	r27
    21b6:	f7 95       	ror	r31
    21b8:	9e 3f       	cpi	r25, 0xFE	; 254
    21ba:	08 f0       	brcs	.+2      	; 0x21be <__addsf3x+0x9a>
    21bc:	b0 cf       	rjmp	.-160    	; 0x211e <__addsf3+0x28>
    21be:	93 95       	inc	r25
    21c0:	88 0f       	add	r24, r24
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <__addsf3x+0xa2>
    21c4:	99 27       	eor	r25, r25
    21c6:	ee 0f       	add	r30, r30
    21c8:	97 95       	ror	r25
    21ca:	87 95       	ror	r24
    21cc:	08 95       	ret

000021ce <__divmodhi4>:
    21ce:	97 fb       	bst	r25, 7
    21d0:	07 2e       	mov	r0, r23
    21d2:	16 f4       	brtc	.+4      	; 0x21d8 <__divmodhi4+0xa>
    21d4:	00 94       	com	r0
    21d6:	07 d0       	rcall	.+14     	; 0x21e6 <__divmodhi4_neg1>
    21d8:	77 fd       	sbrc	r23, 7
    21da:	09 d0       	rcall	.+18     	; 0x21ee <__divmodhi4_neg2>
    21dc:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__udivmodhi4>
    21e0:	07 fc       	sbrc	r0, 7
    21e2:	05 d0       	rcall	.+10     	; 0x21ee <__divmodhi4_neg2>
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__divmodhi4_exit>

000021e6 <__divmodhi4_neg1>:
    21e6:	90 95       	com	r25
    21e8:	81 95       	neg	r24
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	08 95       	ret

000021ee <__divmodhi4_neg2>:
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255

000021f4 <__divmodhi4_exit>:
    21f4:	08 95       	ret

000021f6 <__udivmodhi4>:
    21f6:	aa 1b       	sub	r26, r26
    21f8:	bb 1b       	sub	r27, r27
    21fa:	51 e1       	ldi	r21, 0x11	; 17
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <__udivmodhi4_ep>

000021fe <__udivmodhi4_loop>:
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	a6 17       	cp	r26, r22
    2204:	b7 07       	cpc	r27, r23
    2206:	10 f0       	brcs	.+4      	; 0x220c <__udivmodhi4_ep>
    2208:	a6 1b       	sub	r26, r22
    220a:	b7 0b       	sbc	r27, r23

0000220c <__udivmodhi4_ep>:
    220c:	88 1f       	adc	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	5a 95       	dec	r21
    2212:	a9 f7       	brne	.-22     	; 0x21fe <__udivmodhi4_loop>
    2214:	80 95       	com	r24
    2216:	90 95       	com	r25
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	08 95       	ret

0000221e <malloc>:
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	91 05       	cpc	r25, r1
    222a:	10 f4       	brcc	.+4      	; 0x2230 <malloc+0x12>
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <__flp>
    2234:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <__flp+0x1>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	a0 e0       	ldi	r26, 0x00	; 0
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	30 97       	sbiw	r30, 0x00	; 0
    2242:	19 f1       	breq	.+70     	; 0x228a <malloc+0x6c>
    2244:	40 81       	ld	r20, Z
    2246:	51 81       	ldd	r21, Z+1	; 0x01
    2248:	02 81       	ldd	r16, Z+2	; 0x02
    224a:	13 81       	ldd	r17, Z+3	; 0x03
    224c:	48 17       	cp	r20, r24
    224e:	59 07       	cpc	r21, r25
    2250:	c8 f0       	brcs	.+50     	; 0x2284 <malloc+0x66>
    2252:	84 17       	cp	r24, r20
    2254:	95 07       	cpc	r25, r21
    2256:	69 f4       	brne	.+26     	; 0x2272 <malloc+0x54>
    2258:	10 97       	sbiw	r26, 0x00	; 0
    225a:	31 f0       	breq	.+12     	; 0x2268 <malloc+0x4a>
    225c:	12 96       	adiw	r26, 0x02	; 2
    225e:	0c 93       	st	X, r16
    2260:	12 97       	sbiw	r26, 0x02	; 2
    2262:	13 96       	adiw	r26, 0x03	; 3
    2264:	1c 93       	st	X, r17
    2266:	27 c0       	rjmp	.+78     	; 0x22b6 <malloc+0x98>
    2268:	00 93 59 02 	sts	0x0259, r16	; 0x800259 <__flp>
    226c:	10 93 5a 02 	sts	0x025A, r17	; 0x80025a <__flp+0x1>
    2270:	22 c0       	rjmp	.+68     	; 0x22b6 <malloc+0x98>
    2272:	21 15       	cp	r18, r1
    2274:	31 05       	cpc	r19, r1
    2276:	19 f0       	breq	.+6      	; 0x227e <malloc+0x60>
    2278:	42 17       	cp	r20, r18
    227a:	53 07       	cpc	r21, r19
    227c:	18 f4       	brcc	.+6      	; 0x2284 <malloc+0x66>
    227e:	9a 01       	movw	r18, r20
    2280:	bd 01       	movw	r22, r26
    2282:	ef 01       	movw	r28, r30
    2284:	df 01       	movw	r26, r30
    2286:	f8 01       	movw	r30, r16
    2288:	db cf       	rjmp	.-74     	; 0x2240 <malloc+0x22>
    228a:	21 15       	cp	r18, r1
    228c:	31 05       	cpc	r19, r1
    228e:	f9 f0       	breq	.+62     	; 0x22ce <malloc+0xb0>
    2290:	28 1b       	sub	r18, r24
    2292:	39 0b       	sbc	r19, r25
    2294:	24 30       	cpi	r18, 0x04	; 4
    2296:	31 05       	cpc	r19, r1
    2298:	80 f4       	brcc	.+32     	; 0x22ba <malloc+0x9c>
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
    229e:	61 15       	cp	r22, r1
    22a0:	71 05       	cpc	r23, r1
    22a2:	21 f0       	breq	.+8      	; 0x22ac <malloc+0x8e>
    22a4:	fb 01       	movw	r30, r22
    22a6:	93 83       	std	Z+3, r25	; 0x03
    22a8:	82 83       	std	Z+2, r24	; 0x02
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <malloc+0x96>
    22ac:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <__flp+0x1>
    22b0:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__flp>
    22b4:	fe 01       	movw	r30, r28
    22b6:	32 96       	adiw	r30, 0x02	; 2
    22b8:	44 c0       	rjmp	.+136    	; 0x2342 <malloc+0x124>
    22ba:	fe 01       	movw	r30, r28
    22bc:	e2 0f       	add	r30, r18
    22be:	f3 1f       	adc	r31, r19
    22c0:	81 93       	st	Z+, r24
    22c2:	91 93       	st	Z+, r25
    22c4:	22 50       	subi	r18, 0x02	; 2
    22c6:	31 09       	sbc	r19, r1
    22c8:	39 83       	std	Y+1, r19	; 0x01
    22ca:	28 83       	st	Y, r18
    22cc:	3a c0       	rjmp	.+116    	; 0x2342 <malloc+0x124>
    22ce:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    22d2:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    22d6:	23 2b       	or	r18, r19
    22d8:	41 f4       	brne	.+16     	; 0x22ea <malloc+0xcc>
    22da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    22de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    22e2:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <__brkval+0x1>
    22e6:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <__brkval>
    22ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    22ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    22f2:	21 15       	cp	r18, r1
    22f4:	31 05       	cpc	r19, r1
    22f6:	41 f4       	brne	.+16     	; 0x2308 <malloc+0xea>
    22f8:	2d b7       	in	r18, 0x3d	; 61
    22fa:	3e b7       	in	r19, 0x3e	; 62
    22fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2300:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2304:	24 1b       	sub	r18, r20
    2306:	35 0b       	sbc	r19, r21
    2308:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <__brkval>
    230c:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <__brkval+0x1>
    2310:	e2 17       	cp	r30, r18
    2312:	f3 07       	cpc	r31, r19
    2314:	a0 f4       	brcc	.+40     	; 0x233e <malloc+0x120>
    2316:	2e 1b       	sub	r18, r30
    2318:	3f 0b       	sbc	r19, r31
    231a:	28 17       	cp	r18, r24
    231c:	39 07       	cpc	r19, r25
    231e:	78 f0       	brcs	.+30     	; 0x233e <malloc+0x120>
    2320:	ac 01       	movw	r20, r24
    2322:	4e 5f       	subi	r20, 0xFE	; 254
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	24 17       	cp	r18, r20
    2328:	35 07       	cpc	r19, r21
    232a:	48 f0       	brcs	.+18     	; 0x233e <malloc+0x120>
    232c:	4e 0f       	add	r20, r30
    232e:	5f 1f       	adc	r21, r31
    2330:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <__brkval+0x1>
    2334:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <__brkval>
    2338:	81 93       	st	Z+, r24
    233a:	91 93       	st	Z+, r25
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <malloc+0x124>
    233e:	e0 e0       	ldi	r30, 0x00	; 0
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	cf 01       	movw	r24, r30
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <free>:
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	09 f4       	brne	.+2      	; 0x2358 <free+0xa>
    2356:	81 c0       	rjmp	.+258    	; 0x245a <free+0x10c>
    2358:	fc 01       	movw	r30, r24
    235a:	32 97       	sbiw	r30, 0x02	; 2
    235c:	13 82       	std	Z+3, r1	; 0x03
    235e:	12 82       	std	Z+2, r1	; 0x02
    2360:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <__flp>
    2364:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <__flp+0x1>
    2368:	10 97       	sbiw	r26, 0x00	; 0
    236a:	81 f4       	brne	.+32     	; 0x238c <free+0x3e>
    236c:	20 81       	ld	r18, Z
    236e:	31 81       	ldd	r19, Z+1	; 0x01
    2370:	82 0f       	add	r24, r18
    2372:	93 1f       	adc	r25, r19
    2374:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    2378:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    237c:	28 17       	cp	r18, r24
    237e:	39 07       	cpc	r19, r25
    2380:	51 f5       	brne	.+84     	; 0x23d6 <free+0x88>
    2382:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__brkval+0x1>
    2386:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__brkval>
    238a:	67 c0       	rjmp	.+206    	; 0x245a <free+0x10c>
    238c:	ed 01       	movw	r28, r26
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	ce 17       	cp	r28, r30
    2394:	df 07       	cpc	r29, r31
    2396:	40 f4       	brcc	.+16     	; 0x23a8 <free+0x5a>
    2398:	4a 81       	ldd	r20, Y+2	; 0x02
    239a:	5b 81       	ldd	r21, Y+3	; 0x03
    239c:	9e 01       	movw	r18, r28
    239e:	41 15       	cp	r20, r1
    23a0:	51 05       	cpc	r21, r1
    23a2:	f1 f0       	breq	.+60     	; 0x23e0 <free+0x92>
    23a4:	ea 01       	movw	r28, r20
    23a6:	f5 cf       	rjmp	.-22     	; 0x2392 <free+0x44>
    23a8:	d3 83       	std	Z+3, r29	; 0x03
    23aa:	c2 83       	std	Z+2, r28	; 0x02
    23ac:	40 81       	ld	r20, Z
    23ae:	51 81       	ldd	r21, Z+1	; 0x01
    23b0:	84 0f       	add	r24, r20
    23b2:	95 1f       	adc	r25, r21
    23b4:	c8 17       	cp	r28, r24
    23b6:	d9 07       	cpc	r29, r25
    23b8:	59 f4       	brne	.+22     	; 0x23d0 <free+0x82>
    23ba:	88 81       	ld	r24, Y
    23bc:	99 81       	ldd	r25, Y+1	; 0x01
    23be:	84 0f       	add	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	02 96       	adiw	r24, 0x02	; 2
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	93 83       	std	Z+3, r25	; 0x03
    23ce:	82 83       	std	Z+2, r24	; 0x02
    23d0:	21 15       	cp	r18, r1
    23d2:	31 05       	cpc	r19, r1
    23d4:	29 f4       	brne	.+10     	; 0x23e0 <free+0x92>
    23d6:	f0 93 5a 02 	sts	0x025A, r31	; 0x80025a <__flp+0x1>
    23da:	e0 93 59 02 	sts	0x0259, r30	; 0x800259 <__flp>
    23de:	3d c0       	rjmp	.+122    	; 0x245a <free+0x10c>
    23e0:	e9 01       	movw	r28, r18
    23e2:	fb 83       	std	Y+3, r31	; 0x03
    23e4:	ea 83       	std	Y+2, r30	; 0x02
    23e6:	49 91       	ld	r20, Y+
    23e8:	59 91       	ld	r21, Y+
    23ea:	c4 0f       	add	r28, r20
    23ec:	d5 1f       	adc	r29, r21
    23ee:	ec 17       	cp	r30, r28
    23f0:	fd 07       	cpc	r31, r29
    23f2:	61 f4       	brne	.+24     	; 0x240c <free+0xbe>
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	84 0f       	add	r24, r20
    23fa:	95 1f       	adc	r25, r21
    23fc:	02 96       	adiw	r24, 0x02	; 2
    23fe:	e9 01       	movw	r28, r18
    2400:	99 83       	std	Y+1, r25	; 0x01
    2402:	88 83       	st	Y, r24
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	9b 83       	std	Y+3, r25	; 0x03
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	e0 e0       	ldi	r30, 0x00	; 0
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	12 96       	adiw	r26, 0x02	; 2
    2412:	8d 91       	ld	r24, X+
    2414:	9c 91       	ld	r25, X
    2416:	13 97       	sbiw	r26, 0x03	; 3
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	19 f0       	breq	.+6      	; 0x2422 <free+0xd4>
    241c:	fd 01       	movw	r30, r26
    241e:	dc 01       	movw	r26, r24
    2420:	f7 cf       	rjmp	.-18     	; 0x2410 <free+0xc2>
    2422:	8d 91       	ld	r24, X+
    2424:	9c 91       	ld	r25, X
    2426:	11 97       	sbiw	r26, 0x01	; 1
    2428:	9d 01       	movw	r18, r26
    242a:	2e 5f       	subi	r18, 0xFE	; 254
    242c:	3f 4f       	sbci	r19, 0xFF	; 255
    242e:	82 0f       	add	r24, r18
    2430:	93 1f       	adc	r25, r19
    2432:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    2436:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    243a:	28 17       	cp	r18, r24
    243c:	39 07       	cpc	r19, r25
    243e:	69 f4       	brne	.+26     	; 0x245a <free+0x10c>
    2440:	30 97       	sbiw	r30, 0x00	; 0
    2442:	29 f4       	brne	.+10     	; 0x244e <free+0x100>
    2444:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__flp+0x1>
    2448:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <__flp>
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <free+0x104>
    244e:	13 82       	std	Z+3, r1	; 0x03
    2450:	12 82       	std	Z+2, r1	; 0x02
    2452:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <__brkval+0x1>
    2456:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <__brkval>
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <__itoa_ncheck>:
    2460:	bb 27       	eor	r27, r27
    2462:	4a 30       	cpi	r20, 0x0A	; 10
    2464:	31 f4       	brne	.+12     	; 0x2472 <__itoa_ncheck+0x12>
    2466:	99 23       	and	r25, r25
    2468:	22 f4       	brpl	.+8      	; 0x2472 <__itoa_ncheck+0x12>
    246a:	bd e2       	ldi	r27, 0x2D	; 45
    246c:	90 95       	com	r25
    246e:	81 95       	neg	r24
    2470:	9f 4f       	sbci	r25, 0xFF	; 255
    2472:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__utoa_common>

00002476 <__utoa_ncheck>:
    2476:	bb 27       	eor	r27, r27

00002478 <__utoa_common>:
    2478:	fb 01       	movw	r30, r22
    247a:	55 27       	eor	r21, r21
    247c:	aa 27       	eor	r26, r26
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	aa 1f       	adc	r26, r26
    2484:	a4 17       	cp	r26, r20
    2486:	10 f0       	brcs	.+4      	; 0x248c <__utoa_common+0x14>
    2488:	a4 1b       	sub	r26, r20
    248a:	83 95       	inc	r24
    248c:	50 51       	subi	r21, 0x10	; 16
    248e:	b9 f7       	brne	.-18     	; 0x247e <__utoa_common+0x6>
    2490:	a0 5d       	subi	r26, 0xD0	; 208
    2492:	aa 33       	cpi	r26, 0x3A	; 58
    2494:	08 f0       	brcs	.+2      	; 0x2498 <__utoa_common+0x20>
    2496:	a9 5d       	subi	r26, 0xD9	; 217
    2498:	a1 93       	st	Z+, r26
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	79 f7       	brne	.-34     	; 0x247c <__utoa_common+0x4>
    249e:	b1 11       	cpse	r27, r1
    24a0:	b1 93       	st	Z+, r27
    24a2:	11 92       	st	Z+, r1
    24a4:	cb 01       	movw	r24, r22
    24a6:	0c 94 92 14 	jmp	0x2924	; 0x2924 <strrev>

000024aa <printf>:
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e5       	ldi	r30, 0x5B	; 91
    24b0:	f2 e1       	ldi	r31, 0x12	; 18
    24b2:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__prologue_saves__+0x20>
    24b6:	ae 01       	movw	r20, r28
    24b8:	4b 5f       	subi	r20, 0xFB	; 251
    24ba:	5f 4f       	sbci	r21, 0xFF	; 255
    24bc:	fa 01       	movw	r30, r20
    24be:	61 91       	ld	r22, Z+
    24c0:	71 91       	ld	r23, Z+
    24c2:	af 01       	movw	r20, r30
    24c4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <__iob+0x2>
    24c8:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <__iob+0x3>
    24cc:	0e 94 9b 12 	call	0x2536	; 0x2536 <vfprintf>
    24d0:	e2 e0       	ldi	r30, 0x02	; 2
    24d2:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__epilogue_restores__+0x20>

000024d6 <puts>:
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <__iob+0x2>
    24e2:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <__iob+0x3>
    24e6:	23 81       	ldd	r18, Z+3	; 0x03
    24e8:	21 ff       	sbrs	r18, 1
    24ea:	1b c0       	rjmp	.+54     	; 0x2522 <puts+0x4c>
    24ec:	8c 01       	movw	r16, r24
    24ee:	d0 e0       	ldi	r29, 0x00	; 0
    24f0:	c0 e0       	ldi	r28, 0x00	; 0
    24f2:	f8 01       	movw	r30, r16
    24f4:	81 91       	ld	r24, Z+
    24f6:	8f 01       	movw	r16, r30
    24f8:	60 91 5d 02 	lds	r22, 0x025D	; 0x80025d <__iob+0x2>
    24fc:	70 91 5e 02 	lds	r23, 0x025E	; 0x80025e <__iob+0x3>
    2500:	db 01       	movw	r26, r22
    2502:	18 96       	adiw	r26, 0x08	; 8
    2504:	ed 91       	ld	r30, X+
    2506:	fc 91       	ld	r31, X
    2508:	19 97       	sbiw	r26, 0x09	; 9
    250a:	88 23       	and	r24, r24
    250c:	31 f0       	breq	.+12     	; 0x251a <puts+0x44>
    250e:	09 95       	icall
    2510:	89 2b       	or	r24, r25
    2512:	79 f3       	breq	.-34     	; 0x24f2 <puts+0x1c>
    2514:	df ef       	ldi	r29, 0xFF	; 255
    2516:	cf ef       	ldi	r28, 0xFF	; 255
    2518:	ec cf       	rjmp	.-40     	; 0x24f2 <puts+0x1c>
    251a:	8a e0       	ldi	r24, 0x0A	; 10
    251c:	09 95       	icall
    251e:	89 2b       	or	r24, r25
    2520:	19 f0       	breq	.+6      	; 0x2528 <puts+0x52>
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	02 c0       	rjmp	.+4      	; 0x252c <puts+0x56>
    2528:	8d 2f       	mov	r24, r29
    252a:	9c 2f       	mov	r25, r28
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <vfprintf>:
    2536:	ab e0       	ldi	r26, 0x0B	; 11
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 ea       	ldi	r30, 0xA1	; 161
    253c:	f2 e1       	ldi	r31, 0x12	; 18
    253e:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__prologue_saves__>
    2542:	6c 01       	movw	r12, r24
    2544:	7b 01       	movw	r14, r22
    2546:	8a 01       	movw	r16, r20
    2548:	fc 01       	movw	r30, r24
    254a:	17 82       	std	Z+7, r1	; 0x07
    254c:	16 82       	std	Z+6, r1	; 0x06
    254e:	83 81       	ldd	r24, Z+3	; 0x03
    2550:	81 ff       	sbrs	r24, 1
    2552:	cc c1       	rjmp	.+920    	; 0x28ec <vfprintf+0x3b6>
    2554:	ce 01       	movw	r24, r28
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	3c 01       	movw	r6, r24
    255a:	f6 01       	movw	r30, r12
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	f7 01       	movw	r30, r14
    2560:	93 fd       	sbrc	r25, 3
    2562:	85 91       	lpm	r24, Z+
    2564:	93 ff       	sbrs	r25, 3
    2566:	81 91       	ld	r24, Z+
    2568:	7f 01       	movw	r14, r30
    256a:	88 23       	and	r24, r24
    256c:	09 f4       	brne	.+2      	; 0x2570 <vfprintf+0x3a>
    256e:	ba c1       	rjmp	.+884    	; 0x28e4 <vfprintf+0x3ae>
    2570:	85 32       	cpi	r24, 0x25	; 37
    2572:	39 f4       	brne	.+14     	; 0x2582 <vfprintf+0x4c>
    2574:	93 fd       	sbrc	r25, 3
    2576:	85 91       	lpm	r24, Z+
    2578:	93 ff       	sbrs	r25, 3
    257a:	81 91       	ld	r24, Z+
    257c:	7f 01       	movw	r14, r30
    257e:	85 32       	cpi	r24, 0x25	; 37
    2580:	29 f4       	brne	.+10     	; 0x258c <vfprintf+0x56>
    2582:	b6 01       	movw	r22, r12
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    258a:	e7 cf       	rjmp	.-50     	; 0x255a <vfprintf+0x24>
    258c:	91 2c       	mov	r9, r1
    258e:	21 2c       	mov	r2, r1
    2590:	31 2c       	mov	r3, r1
    2592:	ff e1       	ldi	r31, 0x1F	; 31
    2594:	f3 15       	cp	r31, r3
    2596:	d8 f0       	brcs	.+54     	; 0x25ce <vfprintf+0x98>
    2598:	8b 32       	cpi	r24, 0x2B	; 43
    259a:	79 f0       	breq	.+30     	; 0x25ba <vfprintf+0x84>
    259c:	38 f4       	brcc	.+14     	; 0x25ac <vfprintf+0x76>
    259e:	80 32       	cpi	r24, 0x20	; 32
    25a0:	79 f0       	breq	.+30     	; 0x25c0 <vfprintf+0x8a>
    25a2:	83 32       	cpi	r24, 0x23	; 35
    25a4:	a1 f4       	brne	.+40     	; 0x25ce <vfprintf+0x98>
    25a6:	23 2d       	mov	r18, r3
    25a8:	20 61       	ori	r18, 0x10	; 16
    25aa:	1d c0       	rjmp	.+58     	; 0x25e6 <vfprintf+0xb0>
    25ac:	8d 32       	cpi	r24, 0x2D	; 45
    25ae:	61 f0       	breq	.+24     	; 0x25c8 <vfprintf+0x92>
    25b0:	80 33       	cpi	r24, 0x30	; 48
    25b2:	69 f4       	brne	.+26     	; 0x25ce <vfprintf+0x98>
    25b4:	23 2d       	mov	r18, r3
    25b6:	21 60       	ori	r18, 0x01	; 1
    25b8:	16 c0       	rjmp	.+44     	; 0x25e6 <vfprintf+0xb0>
    25ba:	83 2d       	mov	r24, r3
    25bc:	82 60       	ori	r24, 0x02	; 2
    25be:	38 2e       	mov	r3, r24
    25c0:	e3 2d       	mov	r30, r3
    25c2:	e4 60       	ori	r30, 0x04	; 4
    25c4:	3e 2e       	mov	r3, r30
    25c6:	2a c0       	rjmp	.+84     	; 0x261c <vfprintf+0xe6>
    25c8:	f3 2d       	mov	r31, r3
    25ca:	f8 60       	ori	r31, 0x08	; 8
    25cc:	1d c0       	rjmp	.+58     	; 0x2608 <vfprintf+0xd2>
    25ce:	37 fc       	sbrc	r3, 7
    25d0:	2d c0       	rjmp	.+90     	; 0x262c <vfprintf+0xf6>
    25d2:	20 ed       	ldi	r18, 0xD0	; 208
    25d4:	28 0f       	add	r18, r24
    25d6:	2a 30       	cpi	r18, 0x0A	; 10
    25d8:	40 f0       	brcs	.+16     	; 0x25ea <vfprintf+0xb4>
    25da:	8e 32       	cpi	r24, 0x2E	; 46
    25dc:	b9 f4       	brne	.+46     	; 0x260c <vfprintf+0xd6>
    25de:	36 fc       	sbrc	r3, 6
    25e0:	81 c1       	rjmp	.+770    	; 0x28e4 <vfprintf+0x3ae>
    25e2:	23 2d       	mov	r18, r3
    25e4:	20 64       	ori	r18, 0x40	; 64
    25e6:	32 2e       	mov	r3, r18
    25e8:	19 c0       	rjmp	.+50     	; 0x261c <vfprintf+0xe6>
    25ea:	36 fe       	sbrs	r3, 6
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <vfprintf+0xc4>
    25ee:	8a e0       	ldi	r24, 0x0A	; 10
    25f0:	98 9e       	mul	r9, r24
    25f2:	20 0d       	add	r18, r0
    25f4:	11 24       	eor	r1, r1
    25f6:	92 2e       	mov	r9, r18
    25f8:	11 c0       	rjmp	.+34     	; 0x261c <vfprintf+0xe6>
    25fa:	ea e0       	ldi	r30, 0x0A	; 10
    25fc:	2e 9e       	mul	r2, r30
    25fe:	20 0d       	add	r18, r0
    2600:	11 24       	eor	r1, r1
    2602:	22 2e       	mov	r2, r18
    2604:	f3 2d       	mov	r31, r3
    2606:	f0 62       	ori	r31, 0x20	; 32
    2608:	3f 2e       	mov	r3, r31
    260a:	08 c0       	rjmp	.+16     	; 0x261c <vfprintf+0xe6>
    260c:	8c 36       	cpi	r24, 0x6C	; 108
    260e:	21 f4       	brne	.+8      	; 0x2618 <vfprintf+0xe2>
    2610:	83 2d       	mov	r24, r3
    2612:	80 68       	ori	r24, 0x80	; 128
    2614:	38 2e       	mov	r3, r24
    2616:	02 c0       	rjmp	.+4      	; 0x261c <vfprintf+0xe6>
    2618:	88 36       	cpi	r24, 0x68	; 104
    261a:	41 f4       	brne	.+16     	; 0x262c <vfprintf+0xf6>
    261c:	f7 01       	movw	r30, r14
    261e:	93 fd       	sbrc	r25, 3
    2620:	85 91       	lpm	r24, Z+
    2622:	93 ff       	sbrs	r25, 3
    2624:	81 91       	ld	r24, Z+
    2626:	7f 01       	movw	r14, r30
    2628:	81 11       	cpse	r24, r1
    262a:	b3 cf       	rjmp	.-154    	; 0x2592 <vfprintf+0x5c>
    262c:	98 2f       	mov	r25, r24
    262e:	9f 7d       	andi	r25, 0xDF	; 223
    2630:	95 54       	subi	r25, 0x45	; 69
    2632:	93 30       	cpi	r25, 0x03	; 3
    2634:	28 f4       	brcc	.+10     	; 0x2640 <vfprintf+0x10a>
    2636:	0c 5f       	subi	r16, 0xFC	; 252
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	9f e3       	ldi	r25, 0x3F	; 63
    263c:	99 83       	std	Y+1, r25	; 0x01
    263e:	0d c0       	rjmp	.+26     	; 0x265a <vfprintf+0x124>
    2640:	83 36       	cpi	r24, 0x63	; 99
    2642:	31 f0       	breq	.+12     	; 0x2650 <vfprintf+0x11a>
    2644:	83 37       	cpi	r24, 0x73	; 115
    2646:	71 f0       	breq	.+28     	; 0x2664 <vfprintf+0x12e>
    2648:	83 35       	cpi	r24, 0x53	; 83
    264a:	09 f0       	breq	.+2      	; 0x264e <vfprintf+0x118>
    264c:	59 c0       	rjmp	.+178    	; 0x2700 <vfprintf+0x1ca>
    264e:	21 c0       	rjmp	.+66     	; 0x2692 <vfprintf+0x15c>
    2650:	f8 01       	movw	r30, r16
    2652:	80 81       	ld	r24, Z
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	0e 5f       	subi	r16, 0xFE	; 254
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	88 24       	eor	r8, r8
    265c:	83 94       	inc	r8
    265e:	91 2c       	mov	r9, r1
    2660:	53 01       	movw	r10, r6
    2662:	13 c0       	rjmp	.+38     	; 0x268a <vfprintf+0x154>
    2664:	28 01       	movw	r4, r16
    2666:	f2 e0       	ldi	r31, 0x02	; 2
    2668:	4f 0e       	add	r4, r31
    266a:	51 1c       	adc	r5, r1
    266c:	f8 01       	movw	r30, r16
    266e:	a0 80       	ld	r10, Z
    2670:	b1 80       	ldd	r11, Z+1	; 0x01
    2672:	36 fe       	sbrs	r3, 6
    2674:	03 c0       	rjmp	.+6      	; 0x267c <vfprintf+0x146>
    2676:	69 2d       	mov	r22, r9
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <vfprintf+0x14a>
    267c:	6f ef       	ldi	r22, 0xFF	; 255
    267e:	7f ef       	ldi	r23, 0xFF	; 255
    2680:	c5 01       	movw	r24, r10
    2682:	0e 94 87 14 	call	0x290e	; 0x290e <strnlen>
    2686:	4c 01       	movw	r8, r24
    2688:	82 01       	movw	r16, r4
    268a:	f3 2d       	mov	r31, r3
    268c:	ff 77       	andi	r31, 0x7F	; 127
    268e:	3f 2e       	mov	r3, r31
    2690:	16 c0       	rjmp	.+44     	; 0x26be <vfprintf+0x188>
    2692:	28 01       	movw	r4, r16
    2694:	22 e0       	ldi	r18, 0x02	; 2
    2696:	42 0e       	add	r4, r18
    2698:	51 1c       	adc	r5, r1
    269a:	f8 01       	movw	r30, r16
    269c:	a0 80       	ld	r10, Z
    269e:	b1 80       	ldd	r11, Z+1	; 0x01
    26a0:	36 fe       	sbrs	r3, 6
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <vfprintf+0x174>
    26a4:	69 2d       	mov	r22, r9
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <vfprintf+0x178>
    26aa:	6f ef       	ldi	r22, 0xFF	; 255
    26ac:	7f ef       	ldi	r23, 0xFF	; 255
    26ae:	c5 01       	movw	r24, r10
    26b0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strnlen_P>
    26b4:	4c 01       	movw	r8, r24
    26b6:	f3 2d       	mov	r31, r3
    26b8:	f0 68       	ori	r31, 0x80	; 128
    26ba:	3f 2e       	mov	r3, r31
    26bc:	82 01       	movw	r16, r4
    26be:	33 fc       	sbrc	r3, 3
    26c0:	1b c0       	rjmp	.+54     	; 0x26f8 <vfprintf+0x1c2>
    26c2:	82 2d       	mov	r24, r2
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	88 16       	cp	r8, r24
    26c8:	99 06       	cpc	r9, r25
    26ca:	b0 f4       	brcc	.+44     	; 0x26f8 <vfprintf+0x1c2>
    26cc:	b6 01       	movw	r22, r12
    26ce:	80 e2       	ldi	r24, 0x20	; 32
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    26d6:	2a 94       	dec	r2
    26d8:	f4 cf       	rjmp	.-24     	; 0x26c2 <vfprintf+0x18c>
    26da:	f5 01       	movw	r30, r10
    26dc:	37 fc       	sbrc	r3, 7
    26de:	85 91       	lpm	r24, Z+
    26e0:	37 fe       	sbrs	r3, 7
    26e2:	81 91       	ld	r24, Z+
    26e4:	5f 01       	movw	r10, r30
    26e6:	b6 01       	movw	r22, r12
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    26ee:	21 10       	cpse	r2, r1
    26f0:	2a 94       	dec	r2
    26f2:	21 e0       	ldi	r18, 0x01	; 1
    26f4:	82 1a       	sub	r8, r18
    26f6:	91 08       	sbc	r9, r1
    26f8:	81 14       	cp	r8, r1
    26fa:	91 04       	cpc	r9, r1
    26fc:	71 f7       	brne	.-36     	; 0x26da <vfprintf+0x1a4>
    26fe:	e8 c0       	rjmp	.+464    	; 0x28d0 <vfprintf+0x39a>
    2700:	84 36       	cpi	r24, 0x64	; 100
    2702:	11 f0       	breq	.+4      	; 0x2708 <vfprintf+0x1d2>
    2704:	89 36       	cpi	r24, 0x69	; 105
    2706:	41 f5       	brne	.+80     	; 0x2758 <vfprintf+0x222>
    2708:	f8 01       	movw	r30, r16
    270a:	37 fe       	sbrs	r3, 7
    270c:	07 c0       	rjmp	.+14     	; 0x271c <vfprintf+0x1e6>
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	0c 5f       	subi	r16, 0xFC	; 252
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	08 c0       	rjmp	.+16     	; 0x272c <vfprintf+0x1f6>
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	07 2e       	mov	r0, r23
    2722:	00 0c       	add	r0, r0
    2724:	88 0b       	sbc	r24, r24
    2726:	99 0b       	sbc	r25, r25
    2728:	0e 5f       	subi	r16, 0xFE	; 254
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	f3 2d       	mov	r31, r3
    272e:	ff 76       	andi	r31, 0x6F	; 111
    2730:	3f 2e       	mov	r3, r31
    2732:	97 ff       	sbrs	r25, 7
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <vfprintf+0x212>
    2736:	90 95       	com	r25
    2738:	80 95       	com	r24
    273a:	70 95       	com	r23
    273c:	61 95       	neg	r22
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	8f 4f       	sbci	r24, 0xFF	; 255
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	f0 68       	ori	r31, 0x80	; 128
    2746:	3f 2e       	mov	r3, r31
    2748:	2a e0       	ldi	r18, 0x0A	; 10
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	a3 01       	movw	r20, r6
    274e:	0e 94 de 14 	call	0x29bc	; 0x29bc <__ultoa_invert>
    2752:	88 2e       	mov	r8, r24
    2754:	86 18       	sub	r8, r6
    2756:	45 c0       	rjmp	.+138    	; 0x27e2 <vfprintf+0x2ac>
    2758:	85 37       	cpi	r24, 0x75	; 117
    275a:	31 f4       	brne	.+12     	; 0x2768 <vfprintf+0x232>
    275c:	23 2d       	mov	r18, r3
    275e:	2f 7e       	andi	r18, 0xEF	; 239
    2760:	b2 2e       	mov	r11, r18
    2762:	2a e0       	ldi	r18, 0x0A	; 10
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	25 c0       	rjmp	.+74     	; 0x27b2 <vfprintf+0x27c>
    2768:	93 2d       	mov	r25, r3
    276a:	99 7f       	andi	r25, 0xF9	; 249
    276c:	b9 2e       	mov	r11, r25
    276e:	8f 36       	cpi	r24, 0x6F	; 111
    2770:	c1 f0       	breq	.+48     	; 0x27a2 <vfprintf+0x26c>
    2772:	18 f4       	brcc	.+6      	; 0x277a <vfprintf+0x244>
    2774:	88 35       	cpi	r24, 0x58	; 88
    2776:	79 f0       	breq	.+30     	; 0x2796 <vfprintf+0x260>
    2778:	b5 c0       	rjmp	.+362    	; 0x28e4 <vfprintf+0x3ae>
    277a:	80 37       	cpi	r24, 0x70	; 112
    277c:	19 f0       	breq	.+6      	; 0x2784 <vfprintf+0x24e>
    277e:	88 37       	cpi	r24, 0x78	; 120
    2780:	21 f0       	breq	.+8      	; 0x278a <vfprintf+0x254>
    2782:	b0 c0       	rjmp	.+352    	; 0x28e4 <vfprintf+0x3ae>
    2784:	e9 2f       	mov	r30, r25
    2786:	e0 61       	ori	r30, 0x10	; 16
    2788:	be 2e       	mov	r11, r30
    278a:	b4 fe       	sbrs	r11, 4
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <vfprintf+0x272>
    278e:	fb 2d       	mov	r31, r11
    2790:	f4 60       	ori	r31, 0x04	; 4
    2792:	bf 2e       	mov	r11, r31
    2794:	09 c0       	rjmp	.+18     	; 0x27a8 <vfprintf+0x272>
    2796:	34 fe       	sbrs	r3, 4
    2798:	0a c0       	rjmp	.+20     	; 0x27ae <vfprintf+0x278>
    279a:	29 2f       	mov	r18, r25
    279c:	26 60       	ori	r18, 0x06	; 6
    279e:	b2 2e       	mov	r11, r18
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <vfprintf+0x278>
    27a2:	28 e0       	ldi	r18, 0x08	; 8
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <vfprintf+0x27c>
    27a8:	20 e1       	ldi	r18, 0x10	; 16
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <vfprintf+0x27c>
    27ae:	20 e1       	ldi	r18, 0x10	; 16
    27b0:	32 e0       	ldi	r19, 0x02	; 2
    27b2:	f8 01       	movw	r30, r16
    27b4:	b7 fe       	sbrs	r11, 7
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <vfprintf+0x290>
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	0c 5f       	subi	r16, 0xFC	; 252
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	06 c0       	rjmp	.+12     	; 0x27d2 <vfprintf+0x29c>
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 5f       	subi	r16, 0xFE	; 254
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	a3 01       	movw	r20, r6
    27d4:	0e 94 de 14 	call	0x29bc	; 0x29bc <__ultoa_invert>
    27d8:	88 2e       	mov	r8, r24
    27da:	86 18       	sub	r8, r6
    27dc:	fb 2d       	mov	r31, r11
    27de:	ff 77       	andi	r31, 0x7F	; 127
    27e0:	3f 2e       	mov	r3, r31
    27e2:	36 fe       	sbrs	r3, 6
    27e4:	0d c0       	rjmp	.+26     	; 0x2800 <vfprintf+0x2ca>
    27e6:	23 2d       	mov	r18, r3
    27e8:	2e 7f       	andi	r18, 0xFE	; 254
    27ea:	a2 2e       	mov	r10, r18
    27ec:	89 14       	cp	r8, r9
    27ee:	58 f4       	brcc	.+22     	; 0x2806 <vfprintf+0x2d0>
    27f0:	34 fe       	sbrs	r3, 4
    27f2:	0b c0       	rjmp	.+22     	; 0x280a <vfprintf+0x2d4>
    27f4:	32 fc       	sbrc	r3, 2
    27f6:	09 c0       	rjmp	.+18     	; 0x280a <vfprintf+0x2d4>
    27f8:	83 2d       	mov	r24, r3
    27fa:	8e 7e       	andi	r24, 0xEE	; 238
    27fc:	a8 2e       	mov	r10, r24
    27fe:	05 c0       	rjmp	.+10     	; 0x280a <vfprintf+0x2d4>
    2800:	b8 2c       	mov	r11, r8
    2802:	a3 2c       	mov	r10, r3
    2804:	03 c0       	rjmp	.+6      	; 0x280c <vfprintf+0x2d6>
    2806:	b8 2c       	mov	r11, r8
    2808:	01 c0       	rjmp	.+2      	; 0x280c <vfprintf+0x2d6>
    280a:	b9 2c       	mov	r11, r9
    280c:	a4 fe       	sbrs	r10, 4
    280e:	0f c0       	rjmp	.+30     	; 0x282e <vfprintf+0x2f8>
    2810:	fe 01       	movw	r30, r28
    2812:	e8 0d       	add	r30, r8
    2814:	f1 1d       	adc	r31, r1
    2816:	80 81       	ld	r24, Z
    2818:	80 33       	cpi	r24, 0x30	; 48
    281a:	21 f4       	brne	.+8      	; 0x2824 <vfprintf+0x2ee>
    281c:	9a 2d       	mov	r25, r10
    281e:	99 7e       	andi	r25, 0xE9	; 233
    2820:	a9 2e       	mov	r10, r25
    2822:	09 c0       	rjmp	.+18     	; 0x2836 <vfprintf+0x300>
    2824:	a2 fe       	sbrs	r10, 2
    2826:	06 c0       	rjmp	.+12     	; 0x2834 <vfprintf+0x2fe>
    2828:	b3 94       	inc	r11
    282a:	b3 94       	inc	r11
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <vfprintf+0x300>
    282e:	8a 2d       	mov	r24, r10
    2830:	86 78       	andi	r24, 0x86	; 134
    2832:	09 f0       	breq	.+2      	; 0x2836 <vfprintf+0x300>
    2834:	b3 94       	inc	r11
    2836:	a3 fc       	sbrc	r10, 3
    2838:	11 c0       	rjmp	.+34     	; 0x285c <vfprintf+0x326>
    283a:	a0 fe       	sbrs	r10, 0
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0x314>
    283e:	b2 14       	cp	r11, r2
    2840:	88 f4       	brcc	.+34     	; 0x2864 <vfprintf+0x32e>
    2842:	28 0c       	add	r2, r8
    2844:	92 2c       	mov	r9, r2
    2846:	9b 18       	sub	r9, r11
    2848:	0e c0       	rjmp	.+28     	; 0x2866 <vfprintf+0x330>
    284a:	b2 14       	cp	r11, r2
    284c:	60 f4       	brcc	.+24     	; 0x2866 <vfprintf+0x330>
    284e:	b6 01       	movw	r22, r12
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2858:	b3 94       	inc	r11
    285a:	f7 cf       	rjmp	.-18     	; 0x284a <vfprintf+0x314>
    285c:	b2 14       	cp	r11, r2
    285e:	18 f4       	brcc	.+6      	; 0x2866 <vfprintf+0x330>
    2860:	2b 18       	sub	r2, r11
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <vfprintf+0x332>
    2864:	98 2c       	mov	r9, r8
    2866:	21 2c       	mov	r2, r1
    2868:	a4 fe       	sbrs	r10, 4
    286a:	10 c0       	rjmp	.+32     	; 0x288c <vfprintf+0x356>
    286c:	b6 01       	movw	r22, r12
    286e:	80 e3       	ldi	r24, 0x30	; 48
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2876:	a2 fe       	sbrs	r10, 2
    2878:	17 c0       	rjmp	.+46     	; 0x28a8 <vfprintf+0x372>
    287a:	a1 fc       	sbrc	r10, 1
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <vfprintf+0x34e>
    287e:	88 e7       	ldi	r24, 0x78	; 120
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <vfprintf+0x352>
    2884:	88 e5       	ldi	r24, 0x58	; 88
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	b6 01       	movw	r22, r12
    288a:	0c c0       	rjmp	.+24     	; 0x28a4 <vfprintf+0x36e>
    288c:	8a 2d       	mov	r24, r10
    288e:	86 78       	andi	r24, 0x86	; 134
    2890:	59 f0       	breq	.+22     	; 0x28a8 <vfprintf+0x372>
    2892:	a1 fe       	sbrs	r10, 1
    2894:	02 c0       	rjmp	.+4      	; 0x289a <vfprintf+0x364>
    2896:	8b e2       	ldi	r24, 0x2B	; 43
    2898:	01 c0       	rjmp	.+2      	; 0x289c <vfprintf+0x366>
    289a:	80 e2       	ldi	r24, 0x20	; 32
    289c:	a7 fc       	sbrc	r10, 7
    289e:	8d e2       	ldi	r24, 0x2D	; 45
    28a0:	b6 01       	movw	r22, r12
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    28a8:	89 14       	cp	r8, r9
    28aa:	38 f4       	brcc	.+14     	; 0x28ba <vfprintf+0x384>
    28ac:	b6 01       	movw	r22, r12
    28ae:	80 e3       	ldi	r24, 0x30	; 48
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    28b6:	9a 94       	dec	r9
    28b8:	f7 cf       	rjmp	.-18     	; 0x28a8 <vfprintf+0x372>
    28ba:	8a 94       	dec	r8
    28bc:	f3 01       	movw	r30, r6
    28be:	e8 0d       	add	r30, r8
    28c0:	f1 1d       	adc	r31, r1
    28c2:	80 81       	ld	r24, Z
    28c4:	b6 01       	movw	r22, r12
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    28cc:	81 10       	cpse	r8, r1
    28ce:	f5 cf       	rjmp	.-22     	; 0x28ba <vfprintf+0x384>
    28d0:	22 20       	and	r2, r2
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <vfprintf+0x3a0>
    28d4:	42 ce       	rjmp	.-892    	; 0x255a <vfprintf+0x24>
    28d6:	b6 01       	movw	r22, r12
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    28e0:	2a 94       	dec	r2
    28e2:	f6 cf       	rjmp	.-20     	; 0x28d0 <vfprintf+0x39a>
    28e4:	f6 01       	movw	r30, r12
    28e6:	86 81       	ldd	r24, Z+6	; 0x06
    28e8:	97 81       	ldd	r25, Z+7	; 0x07
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <vfprintf+0x3ba>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	9f ef       	ldi	r25, 0xFF	; 255
    28f0:	2b 96       	adiw	r28, 0x0b	; 11
    28f2:	e2 e1       	ldi	r30, 0x12	; 18
    28f4:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__epilogue_restores__>

000028f8 <strnlen_P>:
    28f8:	fc 01       	movw	r30, r24
    28fa:	05 90       	lpm	r0, Z+
    28fc:	61 50       	subi	r22, 0x01	; 1
    28fe:	70 40       	sbci	r23, 0x00	; 0
    2900:	01 10       	cpse	r0, r1
    2902:	d8 f7       	brcc	.-10     	; 0x28fa <strnlen_P+0x2>
    2904:	80 95       	com	r24
    2906:	90 95       	com	r25
    2908:	8e 0f       	add	r24, r30
    290a:	9f 1f       	adc	r25, r31
    290c:	08 95       	ret

0000290e <strnlen>:
    290e:	fc 01       	movw	r30, r24
    2910:	61 50       	subi	r22, 0x01	; 1
    2912:	70 40       	sbci	r23, 0x00	; 0
    2914:	01 90       	ld	r0, Z+
    2916:	01 10       	cpse	r0, r1
    2918:	d8 f7       	brcc	.-10     	; 0x2910 <strnlen+0x2>
    291a:	80 95       	com	r24
    291c:	90 95       	com	r25
    291e:	8e 0f       	add	r24, r30
    2920:	9f 1f       	adc	r25, r31
    2922:	08 95       	ret

00002924 <strrev>:
    2924:	dc 01       	movw	r26, r24
    2926:	fc 01       	movw	r30, r24
    2928:	67 2f       	mov	r22, r23
    292a:	71 91       	ld	r23, Z+
    292c:	77 23       	and	r23, r23
    292e:	e1 f7       	brne	.-8      	; 0x2928 <strrev+0x4>
    2930:	32 97       	sbiw	r30, 0x02	; 2
    2932:	04 c0       	rjmp	.+8      	; 0x293c <strrev+0x18>
    2934:	7c 91       	ld	r23, X
    2936:	6d 93       	st	X+, r22
    2938:	70 83       	st	Z, r23
    293a:	62 91       	ld	r22, -Z
    293c:	ae 17       	cp	r26, r30
    293e:	bf 07       	cpc	r27, r31
    2940:	c8 f3       	brcs	.-14     	; 0x2934 <strrev+0x10>
    2942:	08 95       	ret

00002944 <fputc>:
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	fb 01       	movw	r30, r22
    294e:	23 81       	ldd	r18, Z+3	; 0x03
    2950:	21 fd       	sbrc	r18, 1
    2952:	03 c0       	rjmp	.+6      	; 0x295a <fputc+0x16>
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	9f ef       	ldi	r25, 0xFF	; 255
    2958:	2c c0       	rjmp	.+88     	; 0x29b2 <fputc+0x6e>
    295a:	22 ff       	sbrs	r18, 2
    295c:	16 c0       	rjmp	.+44     	; 0x298a <fputc+0x46>
    295e:	46 81       	ldd	r20, Z+6	; 0x06
    2960:	57 81       	ldd	r21, Z+7	; 0x07
    2962:	24 81       	ldd	r18, Z+4	; 0x04
    2964:	35 81       	ldd	r19, Z+5	; 0x05
    2966:	42 17       	cp	r20, r18
    2968:	53 07       	cpc	r21, r19
    296a:	44 f4       	brge	.+16     	; 0x297c <fputc+0x38>
    296c:	a0 81       	ld	r26, Z
    296e:	b1 81       	ldd	r27, Z+1	; 0x01
    2970:	9d 01       	movw	r18, r26
    2972:	2f 5f       	subi	r18, 0xFF	; 255
    2974:	3f 4f       	sbci	r19, 0xFF	; 255
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	20 83       	st	Z, r18
    297a:	8c 93       	st	X, r24
    297c:	26 81       	ldd	r18, Z+6	; 0x06
    297e:	37 81       	ldd	r19, Z+7	; 0x07
    2980:	2f 5f       	subi	r18, 0xFF	; 255
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	37 83       	std	Z+7, r19	; 0x07
    2986:	26 83       	std	Z+6, r18	; 0x06
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <fputc+0x6e>
    298a:	8b 01       	movw	r16, r22
    298c:	ec 01       	movw	r28, r24
    298e:	fb 01       	movw	r30, r22
    2990:	00 84       	ldd	r0, Z+8	; 0x08
    2992:	f1 85       	ldd	r31, Z+9	; 0x09
    2994:	e0 2d       	mov	r30, r0
    2996:	09 95       	icall
    2998:	89 2b       	or	r24, r25
    299a:	e1 f6       	brne	.-72     	; 0x2954 <fputc+0x10>
    299c:	d8 01       	movw	r26, r16
    299e:	16 96       	adiw	r26, 0x06	; 6
    29a0:	8d 91       	ld	r24, X+
    29a2:	9c 91       	ld	r25, X
    29a4:	17 97       	sbiw	r26, 0x07	; 7
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	17 96       	adiw	r26, 0x07	; 7
    29aa:	9c 93       	st	X, r25
    29ac:	8e 93       	st	-X, r24
    29ae:	16 97       	sbiw	r26, 0x06	; 6
    29b0:	ce 01       	movw	r24, r28
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <__ultoa_invert>:
    29bc:	fa 01       	movw	r30, r20
    29be:	aa 27       	eor	r26, r26
    29c0:	28 30       	cpi	r18, 0x08	; 8
    29c2:	51 f1       	breq	.+84     	; 0x2a18 <__ultoa_invert+0x5c>
    29c4:	20 31       	cpi	r18, 0x10	; 16
    29c6:	81 f1       	breq	.+96     	; 0x2a28 <__ultoa_invert+0x6c>
    29c8:	e8 94       	clt
    29ca:	6f 93       	push	r22
    29cc:	6e 7f       	andi	r22, 0xFE	; 254
    29ce:	6e 5f       	subi	r22, 0xFE	; 254
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	8f 4f       	sbci	r24, 0xFF	; 255
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	af 4f       	sbci	r26, 0xFF	; 255
    29d8:	b1 e0       	ldi	r27, 0x01	; 1
    29da:	3e d0       	rcall	.+124    	; 0x2a58 <__ultoa_invert+0x9c>
    29dc:	b4 e0       	ldi	r27, 0x04	; 4
    29de:	3c d0       	rcall	.+120    	; 0x2a58 <__ultoa_invert+0x9c>
    29e0:	67 0f       	add	r22, r23
    29e2:	78 1f       	adc	r23, r24
    29e4:	89 1f       	adc	r24, r25
    29e6:	9a 1f       	adc	r25, r26
    29e8:	a1 1d       	adc	r26, r1
    29ea:	68 0f       	add	r22, r24
    29ec:	79 1f       	adc	r23, r25
    29ee:	8a 1f       	adc	r24, r26
    29f0:	91 1d       	adc	r25, r1
    29f2:	a1 1d       	adc	r26, r1
    29f4:	6a 0f       	add	r22, r26
    29f6:	71 1d       	adc	r23, r1
    29f8:	81 1d       	adc	r24, r1
    29fa:	91 1d       	adc	r25, r1
    29fc:	a1 1d       	adc	r26, r1
    29fe:	20 d0       	rcall	.+64     	; 0x2a40 <__ultoa_invert+0x84>
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <__ultoa_invert+0x48>
    2a02:	68 94       	set
    2a04:	3f 91       	pop	r19
    2a06:	2a e0       	ldi	r18, 0x0A	; 10
    2a08:	26 9f       	mul	r18, r22
    2a0a:	11 24       	eor	r1, r1
    2a0c:	30 19       	sub	r19, r0
    2a0e:	30 5d       	subi	r19, 0xD0	; 208
    2a10:	31 93       	st	Z+, r19
    2a12:	de f6       	brtc	.-74     	; 0x29ca <__ultoa_invert+0xe>
    2a14:	cf 01       	movw	r24, r30
    2a16:	08 95       	ret
    2a18:	46 2f       	mov	r20, r22
    2a1a:	47 70       	andi	r20, 0x07	; 7
    2a1c:	40 5d       	subi	r20, 0xD0	; 208
    2a1e:	41 93       	st	Z+, r20
    2a20:	b3 e0       	ldi	r27, 0x03	; 3
    2a22:	0f d0       	rcall	.+30     	; 0x2a42 <__ultoa_invert+0x86>
    2a24:	c9 f7       	brne	.-14     	; 0x2a18 <__ultoa_invert+0x5c>
    2a26:	f6 cf       	rjmp	.-20     	; 0x2a14 <__ultoa_invert+0x58>
    2a28:	46 2f       	mov	r20, r22
    2a2a:	4f 70       	andi	r20, 0x0F	; 15
    2a2c:	40 5d       	subi	r20, 0xD0	; 208
    2a2e:	4a 33       	cpi	r20, 0x3A	; 58
    2a30:	18 f0       	brcs	.+6      	; 0x2a38 <__ultoa_invert+0x7c>
    2a32:	49 5d       	subi	r20, 0xD9	; 217
    2a34:	31 fd       	sbrc	r19, 1
    2a36:	40 52       	subi	r20, 0x20	; 32
    2a38:	41 93       	st	Z+, r20
    2a3a:	02 d0       	rcall	.+4      	; 0x2a40 <__ultoa_invert+0x84>
    2a3c:	a9 f7       	brne	.-22     	; 0x2a28 <__ultoa_invert+0x6c>
    2a3e:	ea cf       	rjmp	.-44     	; 0x2a14 <__ultoa_invert+0x58>
    2a40:	b4 e0       	ldi	r27, 0x04	; 4
    2a42:	a6 95       	lsr	r26
    2a44:	97 95       	ror	r25
    2a46:	87 95       	ror	r24
    2a48:	77 95       	ror	r23
    2a4a:	67 95       	ror	r22
    2a4c:	ba 95       	dec	r27
    2a4e:	c9 f7       	brne	.-14     	; 0x2a42 <__ultoa_invert+0x86>
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	61 05       	cpc	r22, r1
    2a54:	71 05       	cpc	r23, r1
    2a56:	08 95       	ret
    2a58:	9b 01       	movw	r18, r22
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	0a 2e       	mov	r0, r26
    2a5e:	06 94       	lsr	r0
    2a60:	57 95       	ror	r21
    2a62:	47 95       	ror	r20
    2a64:	37 95       	ror	r19
    2a66:	27 95       	ror	r18
    2a68:	ba 95       	dec	r27
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <__ultoa_invert+0xa2>
    2a6c:	62 0f       	add	r22, r18
    2a6e:	73 1f       	adc	r23, r19
    2a70:	84 1f       	adc	r24, r20
    2a72:	95 1f       	adc	r25, r21
    2a74:	a0 1d       	adc	r26, r0
    2a76:	08 95       	ret

00002a78 <__prologue_saves__>:
    2a78:	2f 92       	push	r2
    2a7a:	3f 92       	push	r3
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	ca 1b       	sub	r28, r26
    2aa2:	db 0b       	sbc	r29, r27
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	09 94       	ijmp

00002ab0 <__epilogue_restores__>:
    2ab0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ab2:	39 88       	ldd	r3, Y+17	; 0x11
    2ab4:	48 88       	ldd	r4, Y+16	; 0x10
    2ab6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aba:	7d 84       	ldd	r7, Y+13	; 0x0d
    2abc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2abe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ac0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ac2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ac4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac6:	df 80       	ldd	r13, Y+7	; 0x07
    2ac8:	ee 80       	ldd	r14, Y+6	; 0x06
    2aca:	fd 80       	ldd	r15, Y+5	; 0x05
    2acc:	0c 81       	ldd	r16, Y+4	; 0x04
    2ace:	1b 81       	ldd	r17, Y+3	; 0x03
    2ad0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ad4:	ce 0f       	add	r28, r30
    2ad6:	d1 1d       	adc	r29, r1
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	ed 01       	movw	r28, r26
    2ae4:	08 95       	ret

00002ae6 <_exit>:
    2ae6:	f8 94       	cli

00002ae8 <__stop_program>:
    2ae8:	ff cf       	rjmp	.-2      	; 0x2ae8 <__stop_program>
